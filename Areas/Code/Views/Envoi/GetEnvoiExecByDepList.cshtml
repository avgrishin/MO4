@{
  ViewBag.Title = "РАСКРЫТИЕ И ПРЕДОСТАВЛЕНИЕ ИНФОРМАЦИИ";
  Layout = "~/Views/Shared/_Layout.cshtml";
}
@section scripts {
  <style type="text/css">
    .icon-user-add
    {
      background-image: url(@Href("~/Content/images/user_add.png")) !important;
    }
    .icon-save
    {
      background-image: url(@Href("~/Content/images/save.gif")) !important;
    }
    .icon-add
    {
      background-image: url(@Href("~/Content/images/add.png")) !important;
    }
    .icon-delete
    {
      background-image: url(@Href("~/Content/images/delete.png")) !important;
    }
    .icon-refresh
    {
      background-image: url(@Href("~/Scripts/ExtJS41/resources/themes/images/default/grid/refresh.gif")) !important;
    }
    td.wrap-text div {
      white-space: normal;
    }
    .gray-row .x-grid-cell {
      text-decoration: line-through;
      color: gray;
  }
    .search-item
    {
      font: normal 11px tahoma, arial, helvetica, sans-serif;
      padding: 2px 5px 2px 5px;
      /*border: 1px solid #fff;*/
      border-bottom: 1px solid #eeeeee;
      white-space: normal;
      color: #555;
    }
    .search-item h3
    {
      display: block;
      font: inherit;
      font-weight: bold;
      color: #222;
    }
  </style>
  <link href="~/Scripts/ExtJS41/resources/css/ext-all.css" rel="stylesheet" type="text/css" />
  <link href="~/Scripts/ExtJS41/ux/grid/css/GridFilters.css" rel="stylesheet" type="text/css" />
  <script src="~/Scripts/ExtJS41/bootstrap.js" type="text/javascript"></script>
  <script src="~/Scripts/ExtJS41/ext-lang-ru.js" type="text/javascript"></script>
  <script src="~/Scripts/ExtJS41/ux/Exporter.js" type="text/javascript"></script>
  <script type="text/javascript">

    Ext.Loader.setConfig({ enabled: true });
    Ext.Loader.setPath('Ext.ux', '@Href("~/Scripts/ExtJS41/ux")');
    Ext.require([
      'Ext.grid.*',
      'Ext.data.*',
      'Ext.toolbar.Paging',
      'Ext.ux.grid.FiltersFeature'
    ]);

    Ext.apply(Ext.form.VTypes, {
      daterange: function (val, field) {
        var date = field.parseDate(val);
        if (!date) {
          return false;
        }
        if (field.startDateField) {
          var start = field.ownerCt.getComponent(field.startDateField);
          if (!start.maxValue || (date.getTime() != start.maxValue.getTime())) {
            start.setMaxValue(date);
            start.validate();
          }
        }
        else if (field.endDateField) {
          var end = field.ownerCt.getComponent(field.endDateField);
          if (!end.minValue || (date.getTime() != end.minValue.getTime())) {
            end.setMinValue(date);
            end.validate();
          }
        }
        /*
        * Always return true since we're only using this vtype to set the
        * min/max allowed values (these are tested for after the vtype test)
        */
        return true;
      }
    });
    Ext.define('Ext.ux.CustomNumber', {
      extend: 'Ext.form.field.Number',
      alias: 'widget.customnumber',

      rawToValue: function (rawValue) {
        var value = this.fixPrecision(this.parseValue(rawValue));
        if (value === null) {
          value = rawValue || null;
        }
        return value + '';
      }
    });

    Ext.apply(Ext.util.Format, {
      thousandSeparator: ' ',
      decimalSeparator: '.'
    });

    Ext.define('EnvoiExec', {
      extend: 'Ext.data.Model',
      pageSize: 500,
      remoteSort: true,
      autoSync: false,
      autoLoad: false,
      idProperty: 'id',
      fields: ['id', 'EnvoiID', { name: 'Date1', type: 'date', dateFormat: "c" }, { name: 'Date2', type: 'date', dateFormat: "c" }, 'TypeInf', 'Osnovan', 'Mesto', 'PoryadPredst', 'Periodich', 'PeriodichID', 'SrokRask', 'EmailTo', 'EmailCc', 'IsAuto', { name: 'IsEnabled', type: 'bool' }, 'Comment', 'Responsible', { name: 'Date3', type: 'date', dateFormat: "c" }],
      proxy: {
        type: 'ajax',
        api: {
          read: '@Url.Action("GetEnvoiExecByDepList")',
          update: '@Url.Action("updEnvoiExecByDep")'
        },
        actionMethods: { read: 'POST' },
        reader: {
          type: 'json',
          root: 'data',
          totalProperty: 'totalCount'
        },
        writer: {
          type: 'json',
          root: 'data',
          writeAllFields: true,
          allowSingle: false,
          encode: false
        },
        simpleSortMode: true
      }
    });

    Ext.create('Ext.data.Store', {
      storeId: 'storeEE',
      model: 'EnvoiExec'
    });

    Ext.define('EnvoiExec.Win', {
      extend: 'Ext.window.Window',
      alias: 'widget.envoiexecwin',

      initComponent: function () {
        this.addEvents('create');
        this.addEvents('update');
        Ext.apply(this, {
          width: 600,

          closeAction: 'hide',
          modal: true,
          buttonAlign: 'center',
          items: [{
            xtype: 'form',
            border: false,
            height: 350,
            defaults: { anchor: '100%' },
            bodyPadding: 10,
            activeRecord: null,
            fieldDefaults: {
              labelAlign: 'top',
              msgTarget: 'side'
            },
            items: [{
              xtype: 'textareafield',
              name: 'Comment',
              height: 230,
              autoScroll: true,
              fieldLabel: 'Примечание'
            }, {
              xtype: 'textfield',
              name: 'Responsible',
              fieldLabel: 'Ответственные за направление'
            }, {
              xtype: 'datefield',
              name: 'Date3',
              fieldLabel: 'Дата отправления',
              startDay: 1,
              anchor: '30%',
              format: 'd.m.Y'
            }, {
              name: 'EnvoiID',
              xtype: 'hidden'
            }]
          }],
          dockedItems: [{
            xtype: 'toolbar',
            dock: 'bottom',
            ui: 'footer',
            items: ['->', {
              iconCls: 'icon-save',
              itemId: 'save',
              text: 'Сохранить',
              disabled: true,
              scope: this,
              handler: this.onSave
            }, {
              //iconCls: 'icon-cancel',
              text: 'Отмена',
              scope: this,
              handler: this.onCancel
            }]
          }]
        });
        this.callParent();
      },

      setActiveRecord: function (record) {
        this.activeRecord = record;
        if (record) {
          this.down('#save').enable();
          this.down('form').getForm().loadRecord(record);
        } else {
          this.down('#save').disable();
          this.down('form').getForm().reset();
        }
      },

      onSave: function () {
        var active = this.activeRecord, form = this.down('form').getForm();
        if (!active) {
          return;
        }
        if (form.isValid()) {
          if (this.title == 'Добавить')
            this.fireEvent('create', this, form.getValues(false, false, false, true));
          else {
            form.updateRecord(active);
            this.fireEvent('update');
          }
          this.hide();
        }
      },

      onCancel: function () {
        this.hide();
      }
    });

    Ext.define('EnvoiExec.Grid', {
      extend: 'Ext.grid.Panel',
      alias: 'widget.envoiexecgrid',
      initComponent: function () {
        Ext.apply(this, {
          wini: null,
          defaultType: 'textfield',
          invalidateScrollerOnRefresh: false,
          layoutConfig: { labelSeparator: '' },
          viewConfig: {
            enableTextSelection: true,
            getRowClass: function (record) {
              if (!record.get('IsEnabled') || record.get('Date2') != null)
                return 'gray-row';
            }
          },
          columns: [{
            header: 'Дата, не позднее',
            xtype: 'datecolumn',
            format: 'd.m.Y',
            dataIndex: 'Date1',
            width: 80
          }, {
            header: 'Дата факт. направ.',
            xtype: 'datecolumn',
            format: 'd.m.Y',
            dataIndex: 'Date2',
            width: 80
          }, {
            header: 'Вид отчетности',
            dataIndex: 'TypeInf',
            //width: 200,
            flex: 1,
            tdCls: 'wrap-text'
          }, {
            header: 'Основание',
            dataIndex: 'Osnovan',
            width: 120,
            tdCls: 'wrap-text'
          }, {
            header: 'Место предоставления',
            dataIndex: 'Mesto',
            width: 100,
            tdCls: 'wrap-text'
          }, {
            header: 'Порядок предоставления',
            dataIndex: 'PoryadPredst',
            width: 90,
            tdCls: 'wrap-text'
          }, {
            header: 'Периодичность',
            dataIndex: 'Periodich',
            width: 90,
            tdCls: 'wrap-text'
          }, {
            header: 'Срок направления',
            dataIndex: 'SrokRask',
            width: 150,
            tdCls: 'wrap-text'
          }, {
            header: 'Список получателей',
            dataIndex: 'EmailTo',
            width: 140,
            tdCls: 'wrap-text'
          }, {
            header: 'Список получателей в копии',
            dataIndex: 'EmailCc',
            width: 140,
            tdCls: 'wrap-text',
            hidden: true
          }, {
            header: 'Примечание',
            dataIndex: 'Comment',
            width: 200,
            tdCls: 'wrap-text'
          }, {
            header: 'Ответственные за направление',
            dataIndex: 'Responsible',
            width: 200,
            tdCls: 'wrap-text'
          }, {
            header: 'Дата отправления',
            xtype: 'datecolumn',
            format: 'd.m.Y',
            dataIndex: 'Date3',
            width: 80
          }, {
            header: 'id',
            dataIndex: 'id',
            width: 30,
            hidden: true
          }],
          dockedItems: [{
            xtype: 'toolbar',
            dock: 'top',
            items: [{
              xtype: 'tbtext', text: ' Период: '
            }, {
              xtype: 'datefield',
              itemId: 'd1',
              allowBlank: false,
              format: 'd.m.Y',
              vtype: 'daterange',
              endDateField: 'd2',
              startDay: 1,
              value: Ext.Date.add(Ext.Date.clearTime(new Date(), false), Ext.Date.DAY, -Ext.Date.getDayOfYear(new Date())),
              width: 100
            }, ' ', {
              xtype: 'datefield',
              itemId: 'd2',
              allowBlank: false,
              format: 'd.m.Y',
              vtype: 'daterange',
              startDateField: 'd1',
              startDay: 1,
              value: Ext.Date.add(Ext.Date.add(Ext.Date.clearTime(new Date(), false), Ext.Date.YEAR, 1), Ext.Date.DAY, -Ext.Date.getDayOfYear(Ext.Date.add(Ext.Date.clearTime(new Date(), false), Ext.Date.YEAR, 1))),
              width: 100,
              margin: '0 5 0 0'
            }, ' Не исполнено: ', {
              xtype: 'checkbox',
              checked: true,
              itemId: 'cbIsExec'
            }, {
              iconCls: 'icon-refresh',
              text: 'Обновить',
              scope: this,
              handler: this.onRefreshClick
            }, {
              text: 'Изменить',
              disabled: true,
              itemId: 'change',
              scope: this,
              handler: this.onChangeClick
            }, {
              xtype: 'exporterbutton',
              text: 'Экспорт',
              action: '@Url.Action("ExportExcel", "Home", new { area = "" })',
              file: 'ar.xml'
            }, '->', @Html.Partial("MenuCorp"), ' ']
          }]
        })
        this.callParent();
        this.getSelectionModel().on('selectionchange', this.onSelectChange, this);
        this.on('itemdblclick', this.onRowDblClick, this);
      },

      onRefreshClick: function () {
        var me = this;
        me.store.proxy.extraParams = { d1: me.down('#d1').getValue(), d2: me.down('#d2').getValue(), IsExec: me.down('#cbIsExec').getValue() };
        me.store.load();
      },

      onCreateWin: function () {
        this.wini = Ext.create('EnvoiExec.Win', {
          scope: this,
          listeners: {
            scope: this,
            create: function (form, data) {
              this.store.insert(0, data);
              this.store.sync();
            },
            update: function () {
              this.store.sync();
            }
          }
        });
      },

      onChangeClick: function () {
        if (!this.wini) {
          this.onCreateWin();
        }
        this.wini.setTitle('Изменить');
        this.wini.setActiveRecord(this.getSelectionModel().getSelection()[0]);
        this.wini.show(this);
      },

      onSelectChange: function (selModel, selections) {
        this.down('#change').setDisabled(selections.length === 0);
      },

      onRowDblClick: function () {
        this.onChangeClick();
      },

      onSync: function () {
        this.store.sync();
      }

    });

    Ext.onReady(function () {

      Ext.tip.QuickTipManager.init();

      Ext.create('Ext.Viewport', {
        layout: 'border',
        items: [{
          region: 'north',
          border: false,
          contentEl: 'header'
        }, {
          id: 'tp',
          xtype: 'tabpanel',
          tabPosition: 'top',
          region: 'center',
          activeTab: 0,
          frame: false,
          items: [{
            itemId: 'tcJourEE',
            tag: 5,
            TypeID: 1,
            title: 'Журнал ПО',
            autoScroll: true,
            layout: 'border',
            items: [{
              region: 'center',
              itemId: 'grid',
              border: false,
              xtype: 'envoiexecgrid',
              store: 'storeEE'
            }]
          }]
        }]
      });

    });
  </script>
}
