@{
  Layout = "~/Views/Shared/_Layout.cshtml";
  ViewBag.Title = "Список Email";
}
@section scripts {
  <style type="text/css">
    .icon-user-add {
      background-image: url(@Href("~/Content/images/add.png")) !important;
    }

    .icon-delete {
      background-image: url(@Href("~/Content/images/delete.png")) !important;
    }

    .icon-refresh {
      background-image: url(@Url.Content("~/Scripts/ExtJS62/build/classic/theme-crisp/resources/images/grid/refresh.png")) !important;
    }
    .gray-row .x-grid-cell {
      text-decoration: line-through;
      color: gray;
    }
  </style>
  <link rel="stylesheet" type="text/css" href="~/Scripts/ExtJS62/build/classic/theme-crisp/resources/theme-crisp-all.css" />
  <script type="text/javascript" src="~/Scripts/ExtJS62/ext-bootstrap.js"></script>
  <script src="~/Scripts/ExtJS5/ux/Exporter.js" type="text/javascript"></script>
  <script type="text/javascript" src="~/Scripts/ExtJS62/build/classic/locale/locale-ru.js"></script>
  <script type="text/javascript">

    Ext.define('EMail', {
      extend: 'Ext.data.Model',
      idProperty: 'ID',
      fields: [
        { name: 'ID', type: 'int' },
        { name: 'UserName', type: 'string' },
        { name: 'Name', type: 'string' },
        { name: 'Name1', type: 'string' },
        { name: 'Name2', type: 'string' },
        { name: 'Name3', type: 'string' },
        { name: 'Email', type: 'string' },
        { name: 'TabNomer', type: 'int', allowNull: true },
        { name: 'ObjClsID', type: 'int', allowNull: true },
        { name: 'ObjClsS', type: 'string', persist: false },
        { name: 'IsActive', type: 'boolean' }
      ]
    });

    Ext.create('Ext.data.Store', {
      storeId: 'storeAct',
      fields: ['value', 'text'],
      data: [[false, 'Нет'], [true, 'Да']],
      idProperty: 'value'
    });

    Ext.create('Ext.data.Store', {
      storeId: 'storeKM',
      idProperty: 'id',
      fields: ['id', 'text'],
      autoLoad: false,
      proxy: {
        type: 'ajax',
        actionMethods: { read: 'POST' },
        url: '@Url.Action("getKM")',
        reader: {
          type: 'json',
          rootProperty: 'data'
        }
      }
    });

    var store = Ext.create('Ext.data.Store', {
      remoteSort: true,
      model: 'EMail',
      autoLoad: true,
      autoSync: false,
      proxy: {
        actionMethods: { read: 'POST' },
        type: 'ajax',
        api: {
          create: '@Url.Action("addUser")',
          update: '@Url.Action("updUser")',
          destroy: '@Url.Action("delUser")',
          read: '@Url.Action("getUserList")'
        },
        reader: {
          type: 'json',
          successProperty: 'success',
          rootProperty: 'data',
          messageProperty: 'message'
        },
        writer: {
          type: 'json',
          rootProperty: 'data',
          writeAllFields: true,
          allowSingle: false,
          encode: false
        },
        listeners: {
          exception: function (proxy, response, operation) {
            alert(operation.getError());
          }
        },
        simpleSortMode: true
      }
    });

    Ext.define('EM.Win', {
      extend: 'Ext.window.Window',
      alias: 'widget.emwin',

      initComponent: function () {
        Ext.apply(this, {
          activeRecord: null,
          title: 'Добавить',
          width: 450,
          autoHeight: true,
          closeAction: 'hide',
          modal: true,
          layout: 'fit',
          plain: true,
          bodyStyle: 'padding:5px;',
          buttonAlign: 'center',
          border: true,
          items: {
            xtype: 'panel',
            border: true,
            autoHeight: true,
            baseCls: 'x-plain',
            items: [{
              xtype: 'form',
              autoHeight: true,
              border: true,
              baseCls: 'x-plain',
              bodyPadding: 5,
              fieldDefaults: { labelWidth: 70, labelAlign: 'right' },
              defaults: { anchor: '100%' },
              items: [{
                xtype: 'fieldcontainer',
                layout: 'hbox',
                items: [{
                  xtype: 'textfield',
                  name: 'UserName',
                  flex: 1,
                  fieldLabel: 'Login',
                  allowBlank: false,
                  blankText: 'UserName',
                  emptyText: 'UserName',
                  msgTarget: 'side',
                  margin: '0 5 0 0'
                }, {
                  xtype: 'button',
                  text: 'Найти',
                  handler: this.onFind
                }]
              }, {
                xtype: 'textfield',
                name: 'Name',
                fieldLabel: 'ФИО',
                allowBlank: false,
                blankText: 'ФИО',
                emptyText: 'ФИО',
                msgTarget: 'side'
              }, {
                xtype: 'textfield',
                name: 'Name1',
                fieldLabel: 'Фамилия',
                allowBlank: false,
                blankText: 'Фамилия',
                emptyText: 'Фамилия',
                msgTarget: 'side'
              }, {
                xtype: 'textfield',
                name: 'Name2',
                fieldLabel: 'Имя',
                allowBlank: false,
                blankText: 'Имя',
                emptyText: 'Имя',
                msgTarget: 'side'
              }, {
                xtype: 'textfield',
                name: 'Name3',
                fieldLabel: 'Отчество',
                allowBlank: false,
                blankText: 'Отчество',
                emptyText: 'Отчество',
                msgTarget: 'side'
              }, {
                xtype: 'textfield',
                vtype: 'email',
                name: 'Email',
                fieldLabel: 'Email',
                allowBlank: false,
                blankText: 'Email',
                emptyText: 'Email',
                msgTarget: 'side'
              }, {
                xtype: 'numberfield',
                name: 'TabNomer',
                fieldLabel: 'ТабНомер',
                msgTarget: 'side'
              }, {
                xtype: 'combo',
                store: 'storeKM',
                displayField: 'text',
                valueField: 'id',
                typeAhead: false,
                queryMode: 'local',
                fieldLabel: 'Классифик.',
                forceSelection: true,
                triggerAction: 'all',
                selectOnFocus: true,
                name: 'ObjClsID',
                listeners: {
                  beforerender: function () { this.store.load(); }
                }
              }, {
                xtype: 'fieldcontainer',
                layout: 'hbox',
                items: [{
                  xtype: 'checkbox',
                  name: 'IsActive',
                  boxLabel: 'Работает?',
                  fieldLabel: ' ',
                  labelSeparator: '',
                  hideLabel: false
                }]
              }]
            }]
          },
          buttons: [{
            itemId: 'save',
            text: 'Сохранить',
            scope: this,
            handler: this.onSave
          }, {
            text: 'Отмена',
            scope: this,
            handler: function () {
              this.hide();
            }
          }]
        });
        this.callParent();
      },

      setActiveRecord: function (record) {
        this.activeRecord = record;
        this.down('form').getForm().reset();
        if (record) {
          this.down('#save').enable();
          this.down('form').getForm().loadRecord(record);
        } else {
          this.down('#save').disable();
        }
      },

      onFind: function () {
        var me = this;
        Ext.Ajax.request({
          url: '@Url.Action("findADInfo")',
          timeout: 60000,
          params: {
            userName: me.up('form').getForm().getValues().UserName
          },
          success: function (response) {
            var jr = Ext.decode(response.responseText);
            if (jr.success == true) {
              var f = me.up('form').getForm();
              var s = Ext.decode(response.responseText);
              f.findField('UserName').setValue(s.UserName);
              f.findField('Name').setValue(s.Name);
              f.findField('Name1').setValue(s.Name1);
              f.findField('Name2').setValue(s.Name2);
              f.findField('Name3').setValue(s.Name3);
              f.findField('Email').setValue(s.Email);
            }
            else
              alert('Login не найден!')
          },
          scope: this,
          failure: function (response) {
            alert('Ошибка!');
          }
        });

      },

      onSave: function () {
        var active = this.activeRecord, form = this.down('form').getForm();
        if (!active) {
          return;
        }
        if (form.isValid()) {
          if (this.title == 'Добавить')
            this.fireEvent('create', this, form.getValues(false, false, false, true));
          else {
            form.updateRecord(active);
            this.fireEvent('update');
          }
          this.hide();
        }
      }

    });

    Ext.define('EM.Grid', {
      extend: 'Ext.grid.Panel',
      alias: 'widget.emgrid',
      wini: null,
      initComponent: function () {
        Ext.apply(this, {
          height: 700,
          title: 'EMail',
          store: store,
          columnLines: true,
          columns: [{
            header: 'Работает?',
            dataIndex: 'IsActive',
            xtype: 'checkcolumn',
            readOnly: true,
            width: 100,
            listeners: {
              beforecheckchange: function () { return false; }
            }
          }, {
            header: "Login",
            dataIndex: 'UserName',
            width: 150,
            sortable: true
          }, {
            header: "ФИО",
            dataIndex: 'Name',
            width: 300,
            sortable: true
          }, {
            header: "Фамилия",
            dataIndex: 'Name1',
            width: 140,
            sortable: true
          }, {
            header: "Имя",
            dataIndex: 'Name2',
            width: 140,
            sortable: true
          }, {
            header: "Отчество",
            dataIndex: 'Name3',
            width: 140,
            sortable: true
          }, {
            header: "ТабНомер",
            dataIndex: 'TabNomer',
            width: 100,
            sortable: true
          }, {
            header: "Классификатор",
            dataIndex: 'ObjClsS',
            width: 110,
            sortable: true
          }, {
            header: "Email",
            dataIndex: 'Email',
            flex: 1,
            sortable: true
          }],
          viewConfig: {
            enableTextSelection: true,
            listeners: {
              scope: this,
              beforerender: { fn: this.onRefreshClick }
            },
            getRowClass: function (record) {
              if (!record.get('IsActive'))
                return 'gray-row';
            }

          },
          dockedItems: [{
            xtype: 'toolbar',
            items: [{
              xtype: 'tbtext', text: ' Работает?: '
            }, {
              itemId: 'cbAct',
              xtype: 'combobox',
              store: 'storeAct',
              displayField: 'text',
              valueField: 'value',
              typeAhead: true,
              queryMode: 'local',
              emptyText: '*',
              selectOnFocus: true,
              width: 60,
              listeners: {
                beforerender: function () { this.setValue(true, false); }
              }
            }, '-', {
              iconCls: 'icon-refresh',
              scope: this,
              text: 'Обновить',
              handler: this.onRefreshClick
            }, {
              iconCls: 'icon-user-add',
              text: 'Добавить',
              scope: this,
              handler: this.onAddClick

            }, {
              text: 'Изменить',
              disabled: true,
              itemId: 'change',
              scope: this,
              handler: this.onChangeClick
            }, {
              iconCls: 'icon-delete',
              text: 'Удалить',
              disabled: true,
              itemId: 'delete',
              scope: this,
              handler: this.onDeleteClick
            }]
          }]
        });
        this.callParent();
        this.getSelectionModel().on('selectionchange', this.onSelectChange, this);
        this.on('itemdblclick', this.onRowDblClick, this);
      },

      onRefreshClick: function () {
        this.store.proxy.extraParams = { IsActive: this.down('#cbAct').getValue() };
        store.load();
      },

      onAddClick: function () {
        var rec = new EMail({ IsActive: true });
        if (!this.wini) {
          this.onCreateWin();
        }
        this.wini.setTitle('Добавить');
        this.wini.setActiveRecord(rec);
        this.wini.show(this);
      },

      onChangeClick: function () {
        if (!this.wini) {
          this.onCreateWin();
        }
        this.wini.setTitle('Изменить');
        this.wini.setActiveRecord(this.getSelectionModel().getSelection()[0]);
        this.wini.show(this);
      },

      onRowDblClick: function () {
        this.onChangeClick();
      },

      onCreateWin: function () {
        this.wini = Ext.create('EM.Win', {
          scope: this,
          listeners: {
            scope: this,
            create: function (form, data) {
              this.store.insert(0, data);
              this.store.sync();
            },
            update: function () {
              this.store.sync();
            }
          }
        });
      },

      onDeleteClick: function () {
        var selection = this.getView().getSelectionModel().getSelection()[0];
        if (selection) {
          if (window.confirm('Удалить стр.?')) {
            this.store.remove(selection);
            this.store.sync();
          }
        }
      },

      onSelectChange: function (selModel, selections) {
        this.down('#delete').setDisabled(selections.length === 0);
        this.down('#change').setDisabled(selections.length === 0);
      }

    });

    Ext.onReady(function () {

      Ext.tip.QuickTipManager.init();
      var grid = Ext.create('EM.Grid', {
        id: 'grid-panel',
        renderTo: 'grid'
      });

    });
  </script>
}
<div id="grid" style="padding: 30px">
</div>
