@using MO.Helpers;
@{
  var isSort = string.CompareOrdinal(ViewData["Sort"].ToString(), ViewData["ColumnName"].ToString()) == 0;
  var isDescending = isSort && ViewData["Dir"].ToString() == "asc";
  var routeData = new RouteValueDictionary { { "sort", ViewData["ColumnName"].ToString() }, { "dir", isDescending ? "desc" : "asc" } };

  // Add in the querystring parameters *except* for the paging ones (as sorting should send us back to the first page of data)
  routeData.AddQueryStringParameters()/*.ExceptFor("page", "pageSize")*/;

  var htmlAttributes = new Dictionary<string, object>();
  if (isSort)
  {
    if (!isDescending)
    {
      htmlAttributes.Add("class", "sortAsc");
    }
    else
    {
      htmlAttributes.Add("class", "sortDesc");
    }
  }
}
<a href="@(Url.Action(Html.ViewContext.RouteData.Values["action"].ToString(),         // Action
                    Html.ViewContext.RouteData.Values["controller"].ToString(),     // Controller
                    routeData))">@(Html.Raw(ViewData["DisplayName"].ToString() + (isSort ? " <span class=\"glyphicon glyphicon-menu-" + (!isDescending ? "down" : "up") + "\"></span>" : "")))</a>
