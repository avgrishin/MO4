@{
  ViewBag.Title = "Управляющие пулов, стратегий";
  Layout = "~/Views/Shared/_Layout.cshtml";
}

@section scripts {
  <style type="text/css">
    .icon-user-add
    {
      background-image: url(@Href("~/Content/images/add.png")) !important;
    }
    .icon-save
    {
      background-image: url(@Href("~/Content/images/save.gif")) !important;
    }
    .upload-icon
    {
      background-image: url(@Href("~/Content/images/image_add.png")) !important;
    }
    .icon-delete
    {
      background-image: url(@Href("~/Content/images/delete.png")) !important;
    }
    .icon-refresh
    {
      background-image: url(@Href("~/Scripts/ExtJS62/build/classic/theme-crisp/resources/images/grid/refresh.png")) !important;
    }
    td.wrap-text div {
      white-space: normal;
    }
    .green-row .x-grid-cell, .green-row .x-grid-cell a {
      color: green;
    }
    .red-row .x-grid-cell, .green-row .x-grid-cell a {
      color: red;
    }
    .search-item
    {
      font: normal 11px tahoma, arial, helvetica, sans-serif;
      padding: 2px 5px 2px 5px;
      @*border: 1px solid #fff;*@
      border-bottom: 1px solid #eeeeee;
      white-space: normal;
      color: #555;
    }
    .search-item h3
    {
      display: block;
      margin: 0 0;
      font: inherit;
      font-weight: bold;
      color: #222;
    }
  </style>
  <link rel="stylesheet" type="text/css" href="~/Scripts/ExtJS62/build/classic/theme-crisp/resources/theme-crisp-all.css" />
  <script type="text/javascript" src="~/Scripts/ExtJS62/ext-bootstrap.js"></script>
  <script src="~/Scripts/ExtJS5/ux/Exporter.js" type="text/javascript"></script>
  <script type="text/javascript" src="~/Scripts/ExtJS62/build/classic/locale/locale-ru.js"></script>
  <script type="text/javascript">


    Ext.define('Pool', {
      extend: 'Ext.data.Model',
      pageSize: 500,
      remoteSort: true,
      autoLoad: false,
      fields: ['id', 'Brief', 'Name'],
      proxy: {
        type: 'ajax',
        url: '@Url.Action("getPoolList")',
        actionMethods: { read: 'POST' },
        reader: {
          type: 'json',
          root: 'data',
          totalProperty: 'totalCount'
        },
        simpleSortMode: true
      }
    });

    Ext.create('Ext.data.Store', {
      storeId: 'storepool3',
      model: 'Pool'
    });

    Ext.create('Ext.data.Store', {
      storeId: 'storepool8',
      model: 'Pool'
    });

    Ext.define('PoolUser', {
      extend: 'Ext.data.Model',
      pageSize: 500,
      remoteSort: true,
      autoLoad: false,
      fields: ['id', 'PortfolioID', 'UserID', 'UserName', { name: 'StartDate', type: 'date', dateFormat: 'c' }, { name: 'FinishDate', type: 'date', dateFormat: 'c' }],
      proxy: {
        type: 'ajax',
        api: {
          read: '@Url.Action("getPoolUser")'
        },
        actionMethods: { read: 'POST' },
        reader: {
          type: 'json',
          root: 'data',
          totalProperty: 'totalCount'
        },
        simpleSortMode: true
      }
    });

    Ext.create('Ext.data.Store', {
      storeId: 'storepooluser',
      model: 'PoolUser'
    });

    Ext.define('User', {
      extend: 'Ext.data.Model',
      pageSize: 500,
      remoteSort: true,
      fields: ['id', 'Name'],
      proxy: {
        type: 'ajax',
        url: '@Url.Action("getUser")',
        actionMethods: { read: 'POST' },
        reader: {
          type: 'json',
          root: 'data',
          totalProperty: 'totalCount'
        },
        simpleSortMode: true
      }
    });

    Ext.create('Ext.data.Store', {
      storeId: 'storeuser',
      model: 'User',
      autoLoad: true
    });

    Ext.define('Pool.Grid', {
      extend: 'Ext.grid.Panel',
      alias: 'widget.poolgrid',
      initComponent: function () {
        Ext.apply(this, {
          defaultType: 'textfield',
          autoScroll: true,
          invalidateScrollerOnRefresh: false,
          layoutConfig: { labelSeparator: '' },
          viewConfig: {
            preserveScrollOnRefresh: true,
            enableTextSelection: true
          },
          columns: [{
            header: 'Сокращение',
            dataIndex: 'Brief',
            flex: 1
          }, {
            header: 'Наименование',
            dataIndex: 'Name',
            flex: 1
          }, {
            header: 'id',
            dataIndex: 'id',
            width: 70,
            hidden: true
          }],
          dockedItems: [{
            xtype: 'toolbar',
            dock: 'top',
            items: [{
              iconCls: 'icon-refresh',
              text: 'Обновить',
              scope: this,
              handler: this.onRefreshClick
            }, {
              xtype: 'exporterbutton',
              text: 'Экспорт',
              action: '@Url.Action("ExportExcel", "Home", new { area = "" })',
              file: 'Пулы.xml'
            }]
          }]
        })
        this.callParent();
        //this.getSelectionModel().on('selectionchange', this.onSelectChange, this);
        this.on('itemclick', this.onSelectChange, this);
      },

      onRefreshClick: function () {
        var me = this;
        me.store.proxy.extraParams = { TypeID: me.tag };
        me.store.load();
      },

      onSelectChange: function (selModel, selections) {
        var id = this.getView().getSelectionModel().getSelection()[0].get('id');
        this.up('viewport').down('#uForm').getForm().findField('PoolID').setValue(id);
        if (!(selections.length === 0)) {
          var grid = this.up('viewport').down('#puGrid');
          if (grid) {
            grid.store.proxy.extraParams = { PoolID: id };
            grid.down('#refresh').setDisabled(false);
            grid.store.load();
          }
        }
      }
    });

    Ext.define('PoolUser.Grid', {
      extend: 'Ext.grid.Panel',
      alias: 'widget.poolusergrid',
      initComponent: function () {
        Ext.apply(this, {
          defaultType: 'textfield',
          autoScroll: true,
          invalidateScrollerOnRefresh: false,
          layoutConfig: { labelSeparator: '' },
          viewConfig: {
            preserveScrollOnRefresh: true,
            enableTextSelection: true
          },
          columns: [{
            header: 'Наименование',
            dataIndex: 'UserName',
            flex: 1
          }, {
            header: 'Начало',
            dataIndex: 'StartDate',
            width: 100,
            xtype: 'datecolumn',
            format: 'd.m.Y'
          }, {
            header: 'Окончание',
            dataIndex: 'FinishDate',
            width: 100,
            xtype: 'datecolumn',
            format: 'd.m.Y'
          }, {
            header: 'id',
            dataIndex: 'id',
            width: 70,
            hidden: true
          }],
          dockedItems: [{
            xtype: 'toolbar',
            dock: 'top',
            items: [{
              itemId: 'refresh',
              iconCls: 'icon-refresh',
              text: 'Обновить',
              disabled: true,
              scope: this,
              handler: this.onRefreshClick
            }, {
              itemId: 'delete',
              iconCls: 'icon-delete',
              text: 'Удалить',
              disabled: true,
              scope: this,
              handler: this.onDeleteClick
            }, {
              xtype: 'exporterbutton',
              text: 'Экспорт',
              action: '@Url.Action("ExportExcel", "Home", new { area = "" })',
              file: 'Поручения.xml'
            }]
          }]
        })
        this.callParent();
        this.getSelectionModel().on('selectionchange', this.onSelectChange, this);
        //this.on('itemclick', this.onSelectChange, this);
      },

      onRefreshClick: function () {
        var me = this;
        me.store.load();
      },

      onSelectChange: function (selModel, selections) {
        this.down('#delete').setDisabled(selections.length === 0);
      },

      onDeleteClick: function () {
        var me = this;
        var selection = this.getView().getSelectionModel().getSelection()[0];
        if (selection) {

          if (window.confirm('Удалить стр.?')) {
            Ext.Ajax.request({
              url: '@Url.Action("DelPoolUser")',
              params: { id: selection.get('id') },
              success: function (response) {
                if (Ext.decode(response.responseText).success)
                  me.store.load();
                else
                  Ext.Msg.alert('Error', 'Запись не удалена.');
              },
              failure: function (f, a) {
                Ext.Msg.alert('Error', 'Ошибка при удалении.');
              }
            });
          }
        }
      }

    });

    Ext.define('User.Form', {
      extend: 'Ext.form.Panel',
      xtype: 'userform',
      initComponent: function () {
        Ext.apply(this, {
          defaultType: 'textfield',
          bodyPadding: 10,
          fieldDefaults: {
            labelAlign: 'top',
            msgTarget: 'under'
          },
          layout: 'anchor',
          title: 'Привязка',
          items: [{
            xtype: 'combo',
            store: 'storeuser',
            displayField: 'Name',
            valueField: 'id',
            typeAhead: false,
            queryMode: 'local',
            fieldLabel: 'Управляющий',
            forceSelection: true,
            triggerAction: 'all',
            selectOnFocus: true,
            name: 'UserID',
            anchor: '100%',
            allowBlank: false
          }, {
            xtype: 'datefield',
            name: 'StartDate',
            fieldLabel: 'Начиная с даты',
            startDay: 1,
            allowBlank: false,
            format: 'd.m.Y',
            width: 150,
            value: Ext.Date.add(Ext.Date.clearTime(new Date(), false), Ext.Date.DAY, 0)
          }, {
            name: 'PoolID',
            allowBlank: false,
            hidden: true
          }],
          dockedItems: [{
            xtype: 'toolbar',
            dock: 'bottom',
            ui: 'footer',
            items: ['->', {
              iconCls: 'icon-save',
              itemId: 'add',
              text: 'Добавить',
              disabled: true,
              scope: this,
              handler: this.onAddPoolUser,
              formBind: true
            }]
          }]
        });
        this.callParent();
      },

      onAddPoolUser: function () {
        var me = this;
        if (me.getForm().isValid()) {
          me.getForm().submit({
            jsonSubmit: true,
            url: '@Url.Action("AddPoolUser")',
            success: function (f, a) {
              me.up('viewport').down('#puGrid').store.load();
            },
            failure: function (f, a) {
              Ext.Msg.alert('Error', 'Изменения не записаны. Проверьте значения данных.');
            }
          });
        }
      }

    });

    Ext.onReady(function () {
      Ext.tip.QuickTipManager.init();

      Ext.create('Ext.Viewport', {
        layout: 'border',
        items: [{
          region: 'north',
          border: false,
          contentEl: 'header'
        }, {
          region: 'center',
          xtype: 'tabpanel',
          items: [{
            title: 'Пулы',
            layout: 'fit',
            items: [{
              xtype: 'poolgrid',
              store: 'storepool3',
              border: false,
              tag: 3
            }]
          }, {
            title: 'Стратегии',
            layout: 'fit',
            border: false,
            items: [{
              xtype: 'poolgrid',
              store: 'storepool8',
              border: false,
              tag: 8
            }]
          }],
          listeners: {
            beforetabchange: function (tp, newTab, currentTab) {
              var grid = this.up('viewport').down('#puGrid');
              grid.down('#refresh').setDisabled(true);
              grid.store.removeAll(false);
              var form = this.up('viewport').down('#uForm').getForm().findField('PoolID').setValue(null);
            }
          }
        }, {
          region: 'south',
          height: '30%',
          layout: 'border',
          xtype: 'panel',
          split: true,
          items: [{
            itemId: 'uForm',
            region: 'west',
            xtype: 'userform',
            width: 300,
            border: false,
            split: true
          }, {
            itemId: 'puGrid',
            region: 'center',
            xtype: 'poolusergrid',
            store: 'storepooluser',
            border: false
          }]
        }]
      });
    });
  </script>
}