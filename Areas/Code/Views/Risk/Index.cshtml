@{
  ViewBag.Title = "Риски";
  Layout = "~/Views/Shared/_Layout.cshtml";
}

@section scripts {
  <style type="text/css">
    .icon-user-add
    {
      background-image: url(@Href("~/Content/images/user_add.png")) !important;
    }
    .icon-save
    {
      background-image: url(@Href("~/Content/images/save.gif")) !important;
    }
    .icon-add
    {
      background-image: url(@Href("~/Content/images/add.png")) !important;
    }
    .upload-icon
    {
      background-image: url(@Href("~/Content/images/image_add.png")) !important;
    }
    .icon-delete
    {
      background-image: url(@Href("~/Content/images/delete.png")) !important;
    }
    .icon-refresh
    {
      background-image: url(@Href("~/Scripts/ExtJS41/resources/themes/images/default/grid/refresh.gif")) !important;
    }
    td.wrap-text div {
      white-space: normal;
    }
    .gray-row .x-grid-cell {
      text-decoration: line-through;
      color: gray;
  }

  .x-grid-row-alt {
    background-color: #fafafa;
  }    
    .search-item
    {
      font: normal 11px tahoma, arial, helvetica, sans-serif;
      padding: 2px 5px 2px 5px;
      /*border: 1px solid #fff;*/
      border-bottom: 1px solid #eeeeee;
      white-space: normal;
      color: #555;
    }
    .search-item h3
    {
      display: block;
      font: inherit;
      font-weight: bold;
      color: #222;
    }
  </style>
  <link rel="stylesheet" type="text/css" href="~/Scripts/ExtJS62/build/classic/theme-classic/resources/theme-classic-all.css" />
  <script type="text/javascript" src="~/Scripts/ExtJS62/ext-bootstrap.js"></script>
  <script src="~/Scripts/ExtJS5/ux/Exporter.js" type="text/javascript"></script>

  <script type="text/javascript">

    Ext.Loader.setConfig({ enabled: true });

    Ext.apply(Ext.form.VTypes, {
      daterange: function (val, field) {
        var date = field.parseDate(val);
        if (!date) {
          return false;
        }
        if (field.startDateField) {
          var start = field.ownerCt.getComponent(field.startDateField);
          if (!start.maxValue || (date.getTime() != start.maxValue.getTime())) {
            start.setMaxValue(date);
            start.validate();
          }
        }
        else if (field.endDateField) {
          var end = field.ownerCt.getComponent(field.endDateField);
          if (!end.minValue || (date.getTime() != end.minValue.getTime())) {
            end.setMinValue(date);
            end.validate();
          }
        }
        /*
        * Always return true since we're only using this vtype to set the
        * min/max allowed values (these are tested for after the vtype test)
        */
        return true;
      }
    });

    Ext.util.Format.renderFileRisk = function (value) {
      return Ext.String.format('<a href="@Url.Action("GetFileRisk")?data={1}" target="_blank">{0}</a>', value, encodeURIComponent(value));
    };

    Ext.define('Ext.ux.CustomNumber', {
      extend: 'Ext.form.field.Number',
      alias: 'widget.customnumber',

      rawToValue: function (rawValue) {
        var value = this.fixPrecision(this.parseValue(rawValue));
        if (value === null) {
          value = rawValue || null;
        }
        return value + '';
      }
    });

    Ext.apply(Ext.util.Format, {
      thousandSeparator: ' ',
      decimalSeparator: '.'
    });

    Ext.define('RiskEvents', {
      extend: 'Ext.data.Model',
      pageSize: 500,
      remoteSort: true,
      autoSync: false,
      autoLoad: false,
      idProperty: 'id',
      fields: ['id',
        'CodeKIR',
        'ConfirmDoc',
        { name: 'Date1', type: 'date', dateFormat: 'c' },
        { name: 'Date2', type: 'date', dateFormat: 'c' },
        { name: 'Date3', type: 'date', dateFormat: 'c' },
        { name: 'Date4', type: 'date', dateFormat: 'c' },
        'Dep',
        'DescrComp',
        'DescrCP',
        'SourceID',
        'SrcName',
        'TypeID',
        'TypePID',
        'TypeName',
        { name: 'IsCompensation', type: 'bool' },
        'DirectID',
        'DirectName',
        'QtyDir',
        'QtyDirCompense',
        'IndirectID',
        'IndirectName',
        'QtyIndir',
        'QtyIndirCompense',
        'Author',
        'RiskType'
      ],
      proxy: {
        type: 'ajax',
        api: {
          read: '@Url.Action("getRiskEventsList")',
          create: '@Url.Action("addRiskEvent")',
          update: '@Url.Action("updRiskEvent")',
          destroy: '@Url.Action("delRiskEvent")'
        },
        actionMethods: { read: 'POST' },
        reader: {
          type: 'json',
          rootProperty: 'data',
          totalProperty: 'totalCount'
        },
        writer: {
          type: 'json',
          rootProperty: 'data',
          writeAllFields: true,
          allowSingle: false,
          encode: false
        },
        simpleSortMode: true
      }
    });

    Ext.create('Ext.data.Store', {
      storeId: 'storere',
      model: 'RiskEvents'
    });

    Ext.create('Ext.data.Store', {
      storeId: 'storere2',
      model: 'RiskEvents'
    });

    Ext.create('Ext.data.Store', {
      storeId: 'storeGetTermDate',
      autoLoad: false,
      fields: [{ name: 'TermDate', type: 'date', dateFormat: "c" }],
      proxy: {
        type: 'ajax',
        url: '@Url.Action("GetTermDate")',
        actionMethods: { read: 'POST' },
        reader: {
          type: 'json',
          rootProperty: 'data'
        },
        simpleSortMode: true
      }
    });

    Ext.define('CbModel', {
      extend: 'Ext.data.Model',
      idProperty: 'id',
      fields: ['id', 'name']
    });

    Ext.create('Ext.data.Store', {
      autoLoad: true,
      remoteSort: true,
      storeId: 'storeSource',
      model: 'CbModel',
      proxy: {
        type: 'ajax',
        actionMethods: { read: 'POST' },
        url: '@Url.Action("GetObjClsByParent")' + '/6560',
        reader: {
          type: 'json',
          rootProperty: 'data'
        }
      }
    });

    Ext.create('Ext.data.Store', {
      autoLoad: false,
      remoteSort: true,
      storeId: 'storeType',
      model: 'CbModel',
      proxy: {
        type: 'ajax',
        actionMethods: { read: 'POST' },
        url: '@Url.Action("GetObjClsByParent")',
        reader: {
          type: 'json',
          rootProperty: 'data'
        }
      }
    });

    Ext.create('Ext.data.Store', {
      autoLoad: true,
      remoteSort: true,
      storeId: 'storeDirect',
      model: 'CbModel',
      proxy: {
        type: 'ajax',
        actionMethods: { read: 'POST' },
        url: '@Url.Action("GetObjClsByParent", new { id = 6860 })',
        reader: {
          type: 'json',
          rootProperty: 'data'
        }
      }
    });

    Ext.create('Ext.data.Store', {
      autoLoad: true,
      remoteSort: true,
      storeId: 'storeIndirect',
      model: 'CbModel',
      proxy: {
        type: 'ajax',
        actionMethods: { read: 'POST' },
        url: '@Url.Action("GetObjClsByParent", new { id = 6869 })',
        reader: {
          type: 'json',
          rootProperty: 'data'
        }
      }
    });

    Ext.define('RiskEvents.Win', {
      extend: 'Ext.window.Window',
      alias: 'widget.riskeventswin',

      initComponent: function () {
        Ext.apply(this, {
          activeRecord: null,
          width: 700,
          closeAction: 'hide',
          layout: 'fit',
          modal: true,
          buttonAlign: 'center',
          items: [{
            xtype: 'form',
            //trackResetOnLoad: true,
            fieldDefaults: {
              labelAlign: 'top',
              msgTarget: 'side',
              labelWidth: 190
            },
            bodyPadding: 10,
            defaultType: 'textfield',
            items: [{
              xtype: 'fieldcontainer',
              layout: 'anchor',
              anchor: '100%',
              margin: '0 10 0 10',
              items: [{
                xtype: 'fieldcontainer',
                layout: 'hbox',
                anchor: '100%',
                fieldDefaults: {
                  labelAlign: 'left'
                },
                items: [{
                  itemId: 'Date1',
                  xtype: 'datefield',
                  name: 'Date1',
                  fieldLabel: 'Дата внесения',
                  labelWidth: 90,
                  width: 190,
                  margin: '0 10 0 0',
                  startDay: 1,
                  allowBlank: false,
                  format: 'd.m.Y'
                }, {
                  itemId: 'Date2',
                  xtype: 'datefield',
                  name: 'Date2',
                  fieldLabel: 'Дата события',
                  labelWidth: 90,
                  width: 190,
                  margin: '0 10 0 0',
                  startDay: 1,
                  allowBlank: false,
                  format: 'd.m.Y'
                }, {
                  xtype: 'textfield',
                  name: 'Author',
                  fieldLabel: 'Автор',
                  maxLength: 30,
                  enforceMaxLength: true,
                  labelWidth: 40,
                  flex: 1,
                  margin: '0 0 0 0'
                }]
              }, {
                xtype: 'fieldcontainer',
                layout: 'hbox',
                fieldDefaults: {
                  labelAlign: 'left'
                },
                items: [{
                  itemId: 'Date3',
                  xtype: 'datefield',
                  name: 'Date3',
                  fieldLabel: 'Дата признания / урегулирования',
                  labelWidth: 100,
                  width: 200,
                  margin: '0 10 0 0',
                  startDay: 1,
                  format: 'd.m.Y'
                }, {
                  itemId: 'Date4',
                  xtype: 'datefield',
                  name: 'Date4',
                  fieldLabel: 'Дата возмещения прямых потерь',
                  labelWidth: 110,
                  width: 210,
                  margin: '0 10 0 0',
                  startDay: 1,
                  format: 'd.m.Y'
                }, {
                  xtype: 'checkbox',
                  name: 'IsCompensation',
                  labelWidth: 100,
                  fieldLabel: 'Без возмещения',
                  listeners: {
                    change: function (cb, newValue, oldValue, eOpts) {
                      this.down('#Date4').setDisabled(newValue);
                      this.down('#QtyDirCompense').setDisabled(newValue);
                      this.down('#QtyIndirCompense').setDisabled(newValue);
                    },
                    scope: this
                  }
                }]
              }]
            }, {
              xtype: 'textareafield',
              name: 'DescrComp',
              fieldLabel: 'Описание',
              grow: true,
              growMax: 50,
              margin: '0 10 0 10',
              anchor: '100%'
            }, {
              xtype: 'textareafield',
              name: 'DescrCP',
              fieldLabel: 'Контрольные процедуры',
              grow: true,
              growMax: 50,
              margin: '0 10 0 10',
              anchor: '100%'
            }, {
              xtype: 'fieldcontainer',
              layout: 'hbox',
              anchor: '100%',
              items: [{
                xtype: 'combo',
                margin: '0 5 0 10',
                fieldLabel: 'Источник потерь',
                store: 'storeSource',
                displayField: 'name',
                flex: 1,
                emptyText: '*',
                valueField: 'id',
                typeAhead: true,
                queryMode: 'local',
                selectOnFocus: true,
                name: 'SourceID'
              }, {
                xtype: 'textfield',
                name: 'Dep',
                flex: 1,
                margin: '0 10 0 5',
                maxLength: 30,
                enforceMaxLength: true,
                fieldLabel: 'Подразделение'
              }, {
                xtype: 'textfield',
                name: 'CodeKIR',
                maxLength: 10,
                enforceMaxLength: true,
                flex: 1,
                margin: '0 10 0 5',
                fieldLabel: 'Код КИР'
              }]
            }, {
              xtype: 'fieldset',
              title: 'Тип рискового события',
              defaults: {
                flex: 1,
                hideLabel: true,
                anchor: '100%'
              },
              items: [{
                itemId: 'TypePID',
                xtype: 'combo',
                fieldLabel: 'Рисковое событие',
                store: Ext.create('Ext.data.Store', {
                  autoLoad: true,
                  remoteSort: true,
                  storeId: 'storeTypeP',
                  model: 'CbModel',
                  proxy: {
                    type: 'ajax',
                    actionMethods: { read: 'POST' },
                    url: '@Url.Action("GetObjClsByParent")' + '/6565',
                    reader: {
                      type: 'json',
                      rootProperty: 'data'
                    }
                  }
                }),
                displayField: 'name',
                emptyText: '*',
                valueField: 'id',
                typeAhead: true,
                queryMode: 'local',
                selectOnFocus: true,
                name: 'TypePID',
                submitValue: false,
                listeners: {
                  select: function (combo, record, index) {
                    var typeID = this.down('#TypeID');
                    typeID.clearValue();
                    typeID.store.load({ params: { id: this.down('#TypePID').getValue() } });
                  },
                  scope: this
                }
              }, {
                itemId: 'TypeID',
                xtype: 'combo',
                fieldLabel: 'Рисковое событие',
                store: 'storeType',
                displayField: 'name',
                emptyText: '*',
                valueField: 'id',
                typeAhead: true,
                queryMode: 'local',
                selectOnFocus: true,
                name: 'TypeID'
              }]
            }, {
              xtype: 'fieldset',
              title: 'Подтверждающие документы',
              defaults: {
                flex: 1,
                hideLabel: true,
                anchor: '100%'
              },
              items: [{
                xtype: 'textfield',
                name: 'ConfirmDoc',
                fieldLabel: 'Подтверждающие документы',
                readOnly: true,
                //labelWidth: 300,
                anchor: '100%'
              }, {
                xtype: 'form',
                border: false,
                padding: '0 0 10 0',
                layout: 'hbox',
                items: [{
                  xtype: 'filefield',
                  flex: 1,
                  labelAlign: 'left',
                  labelWidth: 70,
                  emptyText: 'Выбор файла',
                  name: 'FileName',
                  fieldLabel: 'Загрузка',
                  buttonText: '',
                  buttonConfig: {
                    iconCls: 'upload-icon'
                  }
                }, {
                  xtype: 'button',
                  margin: '0 0 0 10',
                  text: 'Загрузить',
                  handler: function () {
                    var form = this.up('form').getForm();
                    if (form.isValid()) {
                      form.submit({
                        url: '@Url.Action("FURisk")',
                        waitMsg: 'Отправка файла...',
                        waitMsgTarget: true,
                        success: function (fp, o) {
                          fp.owner.up('form').getForm().findField('ConfirmDoc').setValue(o.result.file);
                          alert('Файл "' + o.result.file + '" сохранен');
                        },
                        failure: function (fp, o) {
                          alert('Ошибка');
                        }
                      });
                    }
                  }
                }]
              }]
            }, {
              xtype: 'fieldcontainer',
              layout: 'hbox',
              items: [{
                xtype: 'fieldset',
                title: 'Прямые потери',
                flex: 1,
                margin: '0 5 0 0',
                items: [{
                  xtype: 'combo',
                  //margin: '0 5 0 10',
                  fieldLabel: 'Вид прямых потерь',
                  store: 'storeDirect',
                  displayField: 'name',
                  flex: 1,
                  emptyText: '*',
                  valueField: 'id',
                  typeAhead: true,
                  queryMode: 'local',
                  selectOnFocus: true,
                  name: 'DirectID',
                  anchor: '100%'
                }, {
                  name: 'QtyDir',
                  fieldLabel: 'Сумма прямых потерь',
                  labelAlign: 'left',
                  labelWidth: 200,
                  xtype: 'customnumber',
                  allowDecimals: true,
                  decimalPrecision: 2,
                  hideTrigger: true,
                  keyNavEnabled: false,
                  mouseWheelEnabled: false,
                  autoStripChars: true,
                  anchor: '100%'
                }, {
                  name: 'QtyDirCompense',
                  itemId: 'QtyDirCompense',
                  fieldLabel: 'Сумма возмещения прямых потерь',
                  labelAlign: 'left',
                  labelWidth: 200,
                  xtype: 'customnumber',
                  allowDecimals: true,
                  decimalPrecision: 2,
                  hideTrigger: true,
                  keyNavEnabled: false,
                  mouseWheelEnabled: false,
                  autoStripChars: true,
                  anchor: '100%'
                }]
              }, {
                xtype: 'fieldset',
                title: 'Косвенный ущерб',
                flex: 1,
                margin: '0 0 0 5',
                items: [{
                  xtype: 'combo',
                  fieldLabel: 'Вид косвенного ущерба',
                  store: 'storeIndirect',
                  displayField: 'name',
                  flex: 1,
                  emptyText: '*',
                  valueField: 'id',
                  typeAhead: true,
                  queryMode: 'local',
                  selectOnFocus: true,
                  name: 'IndirectID',
                  anchor: '100%'
                }, {
                  name: 'QtyIndir',
                  fieldLabel: 'Сумма косвенного ущерба',
                  labelAlign: 'left',
                  labelWidth: 200,
                  xtype: 'customnumber',
                  allowDecimals: true,
                  decimalPrecision: 2,
                  hideTrigger: true,
                  keyNavEnabled: false,
                  mouseWheelEnabled: false,
                  autoStripChars: true,
                  anchor: '100%'
                }, {
                  name: 'QtyIndirCompense',
                  itemId: 'QtyIndirCompense',
                  fieldLabel: 'Сумма возмещения косвенного ущерба',
                  labelAlign: 'left',
                  labelWidth: 200,
                  xtype: 'customnumber',
                  allowDecimals: true,
                  decimalPrecision: 2,
                  hideTrigger: true,
                  keyNavEnabled: false,
                  mouseWheelEnabled: false,
                  autoStripChars: true,
                  anchor: '100%'
                }]
              }]
            }, {
              name: 'RiskType',
              xtype: 'hidden'
            }]
          }],
          dockedItems: [{
            xtype: 'toolbar',
            dock: 'bottom',
            ui: 'footer',
            items: ['->', {
              iconCls: 'icon-save',
              itemId: 'save',
              text: 'Сохранить',
              disabled: true,
              scope: this,
              handler: this.onSave
            }, {
              //iconCls: 'icon-cancel',
              text: 'Отмена',
              scope: this,
              handler: this.onCancel
            }]
          }]
        });
        this.callParent();
      },

      setActiveRecord: function (record) {
        var me = this;
        var form = me.down('form').getForm();
        me.activeRecord = record;
        if (record) {
          me.down('#save').enable();
          if (record.data.TypePID) {

            var c = me.down('#TypeID');
            if (record.data.TypeID) {
              var l = function (r) {
                c.setValue(record.data.TypeID);
                c.store.un('load', l);
              };
              c.store.on('load', l);
            }
            c.store.load({ params: { id: record.data.TypePID } });
          }
          else {
            me.down('#TypePID').clearValue();
            me.down('#TypeID').store.removeAll();
          }
          //form.reset(true);
          form.loadRecord(record);
        } else {
          me.down('#save').disable();
          form.reset();
        }
      },

      onSave: function () {
        var active = this.activeRecord, form = this.down('form').getForm();
        if (!active) {
          return;
        }
        if (form.isValid()) {
          if (this.title == 'Добавить') {
            this.fireEvent('create', this, form.getValues(false, false, false, true));
            //form.reset();
          }
          else {
            form.updateRecord(active);
            this.fireEvent('update');
            //form.reset();
          }
          this.hide();
        }
      },

      onCancel: function () {
        this.hide();
      },

      onReset: function () {
        this.setActiveRecord(null);
        //this.getForm().reset();
      }
    });

    Ext.define('RiskEvents.Grid', {
      extend: 'Ext.grid.Panel',
      alias: 'widget.regrid',
      constructor: function () {
        this.plugins = [{
          ptype: 'rowexpander',
          expandOnDblClick: false,
          rowBodyTpl: new Ext.XTemplate('<p style="width:1000px"><b>Описание:</b> {DescrComp}</p>')
        }];
        this.callParent(arguments);
      },
      initComponent: function () {
        Ext.apply(this, {
          wini: null,
          defaultType: 'textfield',
          invalidateScrollerOnRefresh: false,
          layoutConfig: { labelSeparator: '' },
          viewConfig: {
            enableTextSelection: true,
            stripeRows: true
          },
          columnLines: true,
          columns: [{
            header: 'Дата <br/>внесения',
            xtype: 'datecolumn',
            format: 'd.m.Y',
            dataIndex: 'Date1',
            width: 80
          }, {
            header: 'Дата  <br/>события',
            xtype: 'datecolumn',
            format: 'd.m.Y',
            dataIndex: 'Date2',
            width: 80
          }, {
            header: 'Дата признания /  <br/>урегулирования',
            xtype: 'datecolumn',
            format: 'd.m.Y',
            dataIndex: 'Date3',
            width: 80
          }, {
            header: 'Дата возмещения <br/>прямых потерь',
            xtype: 'datecolumn',
            format: 'd.m.Y',
            dataIndex: 'Date4',
            width: 80
          }, {
            header: 'Без <br/>возмещения',
            xtype: 'checkcolumn',
            dataIndex: 'IsCompensation',
            width: 30,
            listeners: {
              beforecheckchange: function (e) {
                return false;
              }
            }
          }, {
            header: 'Автор',
            dataIndex: 'Author',
            width: 100
          }, {
            //  header: 'Описание',
            //  dataIndex: 'DescrComp',
            //  width: 200,
            //  tdCls: 'wrap-text'
            //}, {
            header: 'Контрольные <br/>процедуры',
            dataIndex: 'DescrCP',
            width: 200,
            tdCls: 'wrap-text'
          }, {
            header: 'Источник потерь',
            dataIndex: 'SrcName',
            width: 120,
            tdCls: 'wrap-text'
          }, {
            header: 'Подтверждающие <br/>документы',
            dataIndex: 'ConfirmDoc',
            width: 120,
            renderer: function (value, metaData) {
              return Ext.String.format('<a href="@Url.Action("GetFileRisk")?data={1}" target="_blank">{0}</a>', value, encodeURIComponent(value == null ? "" : value));
            },
            //'renderFileRisk',
            tdCls: 'wrap-text'
          }, {
            header: 'Подразделение',
            dataIndex: 'Dep',
            width: 70,
            tdCls: 'wrap-text'
          }, {
            header: 'Рисковое событие',
            dataIndex: 'TypeName',
            width: 200,
            tdCls: 'wrap-text'
          }, {
            header: 'Код КИР',
            dataIndex: 'CodeKIR',
            width: 60,
            tdCls: 'wrap-text'
          }, {
            header: 'Вид прямых потерь',
            dataIndex: 'DirectName',
            width: 200,
            tdCls: 'wrap-text'
          }, {
            header: 'Сумма прямых <br/>потерь',
            dataIndex: 'QtyDir',
            width: 100,
            align: 'right',
            xtype: 'numbercolumn'
          }, {
            header: 'Вид косвенного ущерба',
            dataIndex: 'IndirectName',
            width: 200,
            tdCls: 'wrap-text'
          }, {
            header: 'Сумма косвенного <br/>ущерба',
            dataIndex: 'QtyIndir',
            width: 100,
            align: 'right',
            xtype: 'numbercolumn'
          }, {
            header: 'id',
            dataIndex: 'ID',
            width: 30,
            hidden: true
          }],
          dockedItems: [{
            xtype: 'toolbar',
            dock: 'top',
            items: [{
              iconCls: 'icon-refresh',
              text: 'Обновить',
              scope: this,
              handler: this.onRefreshClick
            }, {
              iconCls: 'icon-add',
              text: 'Добавить',
              scope: this,
              handler: this.onAddClick
            }, {
              text: 'Изменить',
              disabled: true,
              itemId: 'change',
              scope: this,
              handler: this.onChangeClick
            }, {
              iconCls: 'icon-delete',
              text: 'Удалить',
              disabled: true,
              itemId: 'delete',
              scope: this,
              handler: this.onDeleteClick
            }, {
              xtype: 'exporterbutton',
              text: 'Экспорт',
              action: '@Url.Action("ExportExcel", "Home", new { area = "" })',
              file: 'RiskEvents.xml'
            }]
          }]
        })
        this.callParent();
        this.getSelectionModel().on('selectionchange', this.onSelectChange, this);
        this.on('itemdblclick', this.onRowDblClick, this);
      },

      onSendEmailClick: function () {
        if (window.confirm('Отправить сообщение?')) {
          Ext.Ajax.request({
            url: '@Url.Action("DeclViolCourriel")',
            timeout: 60000,
            success: function (response) {
              var text = response.responseText;
              alert('Выполнено.');
            },
            failure: function (response) {
              var text = response.responseText;
              alert('Ошибка!');
            }
          });
        }
      },

      onRefreshClick: function () {
        var me = this;
        me.store.proxy.extraParams = { RiskType: this.up('panel').tag };
        me.store.load();
      },

      onSelectChange: function (selModel, selections) {
        this.down('#delete').setDisabled(selections.length === 0);
        this.down('#change').setDisabled(selections.length === 0);
      },

      onCreateWin: function () {
        this.wini = Ext.create('RiskEvents.Win', {
          scope: this,
          listeners: {
            scope: this,
            create: function (form, data) {
              this.store.insert(0, data);
              this.store.sync();
            },
            update: function () {
              this.store.sync();
            }
          }
        });
      },

      onAddClick: function () {
        //var rec = new RiskEvents({ Date1: Ext.Date.clearTime(new Date(), false), Date2: Ext.Date.clearTime(new Date(), false), Date3: Ext.Date.clearTime(new Date(), false), Date4: Ext.Date.clearTime(new Date(), false) });
        var rec = Ext.create('RiskEvents', {
          Date1: Ext.Date.clearTime(new Date(), false),
          Date2: Ext.Date.clearTime(new Date(), false),
          Date3: Ext.Date.clearTime(new Date(), false),
          Date4: Ext.Date.clearTime(new Date(), false),
          CodeKIR: null,
          ConfirmDoc: null,
          Dep: null,
          DescrComp: null,
          DescrCP: null,
          SourceID: null,
          SrcName: null,
          TypeID: null,
          TypePID: null,
          TypeName: null,
          IsCompensation: null,
          DirectID: null,
          DirectName: null,
          QtyDir: null,
          QtyDirCompense: null,
          IndirectID: null,
          IndirectName: null,
          QtyIndir: null,
          QtyIndirCompense: null,
          Author: null,
          RiskType: this.up('panel').tag
        });
        if (!this.wini) {
          this.onCreateWin();
        }
        this.wini.setTitle('Добавить');
        this.wini.setActiveRecord(rec);
        this.wini.show(this);
      },

      onChangeClick: function () {
        if (!this.wini) {
          this.onCreateWin();
        }
        this.wini.setTitle('Изменить');
        var rec = this.getSelectionModel().getSelection()[0];
        this.wini.setActiveRecord(rec);
        this.wini.show(this);
      },

      onRowDblClick: function () {
        this.onChangeClick();
      },

      onSync: function () {
        this.store.sync();
      },

      onDeleteClick: function () {
        var selection = this.getView().getSelectionModel().getSelection()[0];
        if (selection) {
          if (window.confirm('Удалить стр.?')) {
            this.store.remove(selection);
            this.onSync();
          }
        }
      }
    });

    Ext.onReady(function () {
      Ext.tip.QuickTipManager.init();
      Ext.create('Ext.Viewport', {
        layout: 'border',
        items: [{
          region: 'north',
          border: false,
          contentEl: 'header'
        }, {
          id: 'tp',
          xtype: 'tabpanel',
          tabPosition: 'top',
          region: 'center',
          activeTab: 0,
          frame: false,
          items: [{
            itemId: 'tcRE',
            tag: 0,
            title: 'События операционного риска',
            autoScroll: true,
            layout: 'border',
            items: [{
              region: 'center',
              itemId: 'grid',
              border: false,
              xtype: 'regrid',
              store: 'storere'
            }]
          }, {
            itemId: 'tcRE2',
            tag: 1,
            title: 'События операционного риска 2',
            autoScroll: true,
            layout: 'border',
            items: [{
              region: 'center',
              itemId: 'grid',
              border: false,
              xtype: 'regrid',
              store: 'storere2'
            }]
          }]
        }]
      });

    });
  </script>
}