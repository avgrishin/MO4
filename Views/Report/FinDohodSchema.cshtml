@{
  ViewBag.Title = "ФинДоход схема";
  Layout = "~/Views/Shared/_Layout.cshtml";
}
@section scripts {
  <style type="text/css">
    .icon-user-add
    {
      background-image: url(@Href("~/Content/images/user_add.png")) !important;
    }
    .icon-save
    {
      background-image: url(@Href("~/Content/images/save.gif")) !important;
    }
    .icon-add
    {
      background-image: url(@Href("~/Content/images/add.png")) !important;
    }
    .icon-delete
    {
      background-image: url(@Href("~/Content/images/delete.png")) !important;
    }
    .icon-refresh
    {
      background-image: url(@Href("~/Scripts/ExtJS41/resources/themes/images/default/grid/refresh.gif")) !important;
    }
  </style>
  <link href="~/Scripts/ExtJS41/resources/css/ext-all.css" rel="stylesheet" type="text/css" />
  <script src="~/Scripts/ExtJS41/bootstrap.js" type="text/javascript"></script>
  <link href="~/Scripts/ExtJS41/ux/grid/css/GridFilters.css" rel="stylesheet" type="text/css" />
  <link href="~/Scripts/ExtJS41/ux/grid/css/RangeMenu.css" rel="stylesheet" type="text/css" />
  <script src="~/Scripts/ExtJS41/ext-lang-ru.js" type="text/javascript"></script>
  <script type="text/javascript">

    Ext.Loader.setConfig({ enabled: true });
    Ext.Loader.setPath('Ext.ux', '@Url.Content("~/Scripts/ExtJS41/ux")');
    Ext.require([
      'Ext.grid.*',
      'Ext.data.*',
      'Ext.ux.grid.FiltersFeature',
      'Ext.toolbar.Paging'
    ]);

    Ext.apply(Ext.util.Format, {
      thousandSeparator: ' ',
      decimalSeparator: '.'
    });

    Ext.define('FDS', {
      extend: 'Ext.data.Model',
      idProperty: 'ID',
      fields: [
        'ID', 'IFRS_SubSector', 'IFRS_Item', 'Fin_Sector', 'Fin_SubSector', 'Fin_Item', 'DEF_L1', 'DEF_L2', 'Sub_UrUnitName_To',
        'Sub_OrgUnitName_To', 'Agent_Type', 'UR_Format_AG', 'Agent_Name', 'TCS_Istochnik_From', 'TCS_Istochnik_From_Kategory',
        'TCS_Type_From', 'TCS_Vid_From', 'UR_Format_KL', 'TCS_Residence', 'Sub_UrUnitName_From', 'Prod_Klass', 'Prod_Group',
        'Prod_SubGroup', 'Prod_Residence', 'Prod_ShortName', 'Event_MethodCalc', 'TaxGroup', 'Instr_Type'
      ]
    });

    var filters = {
      ftype: 'filters',
      encode: true,
      local: false,
      autoReload: false
    };

    Ext.define('FDS.Win', {
      extend: 'Ext.window.Window',
      alias: 'widget.fdswin',

      initComponent: function () {
        this.addEvents('create');
        this.addEvents('update');
        Ext.apply(this, {
          width: 500,
          autoHeight: true,
          closeAction: 'hide',
          modal: true,
          layout: 'fit',
          plain: true,
          bodyStyle: 'padding:5px;',
          buttonAlign: 'center',
          border: true,
          items: [
            Ext.create('Ext.form.Panel', {
              activeRecord: null,
              border: true,
              frame: false,
              autoHeight: true,
              autoWidth: true,
              baseCls: 'x-plain',
              bodyStyle: 'padding:5px 5px 0',
              bodyPadding: 5,
              defaults: { anchor: '100%' },
              defaultType: 'textfield',
              layoutConfig: { labelSeparator: '' },
              fieldDefaults: { labelWidth: 170, labelAlign: 'right' },
              items: [{
                name: 'IFRS_SubSector',
                fieldLabel: 'IFRS_SubSector'
              }, {
                name: 'IFRS_Item',
                fieldLabel: 'IFRS_Item'
              }, {
                name: 'Fin_Sector',
                fieldLabel: 'Fin_Sector'
              }, {
                name: 'Fin_SubSector',
                fieldLabel: 'Fin_SubSector'
              }, {
                name: 'Fin_Item',
                fieldLabel: 'Fin_Item'
              }, {
                name: 'DEF_L1',
                fieldLabel: 'DEF_L1'
              }, {
                name: 'DEF_L2',
                fieldLabel: 'DEF_L2'
              }, {
                name: 'Sub_UrUnitName_To',
                fieldLabel: 'Sub_UrUnitName_To'
              }, {
                name: 'Sub_OrgUnitName_To',
                fieldLabel: 'Sub_OrgUnitName_To'
              }, {
                name: 'Agent_Type',
                fieldLabel: 'Agent_Type'
              }, {
                name: 'UR_Format_AG',
                fieldLabel: 'UR_Format_AG'
              }, {
                name: 'Agent_Name',
                fieldLabel: 'Agent_Name'
              }, {
                name: 'TCS_Istochnik_From',
                fieldLabel: 'TCS_Istochnik_From'
              }, {
                name: 'TCS_Istochnik_From_Kategory',
                fieldLabel: 'TCS_Istochnik_From_Kategory'
              }, {
                name: 'TCS_Type_From',
                fieldLabel: 'TCS_Type_From'
              }, {
                name: 'TCS_Vid_From',
                fieldLabel: 'TCS_Vid_From'
              }, {
                name: 'UR_Format_KL',
                fieldLabel: 'UR_Format_KL'
              }, {
                name: 'TCS_Residence',
                fieldLabel: 'TCS_Residence'
              }, {
                name: 'Sub_UrUnitName_From',
                fieldLabel: 'Sub_UrUnitName_From'
              }, {
                name: 'Prod_Klass',
                fieldLabel: 'Prod_Klass'
              }, {
                name: 'Prod_Group',
                fieldLabel: 'Prod_Group'
              }, {
                name: 'Prod_SubGroup',
                fieldLabel: 'Prod_SubGroup'
              }, {
                name: 'Prod_Residence',
                fieldLabel: 'Prod_Residence'
              }, {
                name: 'Prod_ShortName',
                fieldLabel: 'Prod_ShortName'
              }, {
                name: 'Event_MethodCalc',
                fieldLabel: 'Event_MethodCalc'
              }, {
                name: 'TaxGroup',
                fieldLabel: 'TaxGroup'
              }, {
                name: 'Instr_Type',
                fieldLabel: 'Instr_Type'
              }],
              listeners: {
                'actioncomplete': this.onActionComplete
              }
            })
          ],
          dockedItems: [{
            xtype: 'toolbar',
            dock: 'bottom',
            ui: 'footer',
            items: ['->', {
              iconCls: 'icon-save',
              itemId: 'save',
              text: 'Сохранить',
              disabled: true,
              scope: this,
              handler: this.onSave
            }, {
              text: 'Отмена',
              scope: this,
              handler: this.onCancel
            }]
          }]
        });
        this.callParent();
      },

      onActionComplete: function (form, action) {
      },

      setActiveRecord: function (record) {
        this.activeRecord = record;
        if (record) {
          this.down('#save').enable();
          this.items.items[0].getForm().loadRecord(record);
        } else {
          this.down('#save').disable();
          this.items.items[0].getForm().reset();
        }
      },

      onSave: function () {
        var active = this.activeRecord, form = this.items.items[0].getForm();
        if (!active) {
          return;
        }
        if (form.isValid()) {
          if (this.title == 'Добавить')
            this.fireEvent('create', this, form.getValues(false, false, false, true));
          else {
            form.updateRecord(active);
            this.fireEvent('update');
          }
          this.hide();
        }
      },

      onCancel: function () {
        this.hide();
      }
    });

    Ext.define('FDS.Grid', {
      extend: 'Ext.grid.Panel',
      alias: 'widget.fdsgrid',
      initComponent: function () {
        Ext.apply(this, {
          wini: null,
          region: 'center',
          //layout: 'fit',
          //frame: true,
          defaultType: 'textfield',
          layoutConfig: { labelSeparator: '' },
          columns: [{
            header: 'IFRS_SubSector',
            dataIndex: 'IFRS_SubSector',
            width: 100,
            hidden: true
          }, {
            header: 'IFRS_Item',
            dataIndex: 'IFRS_Item',
            width: 100,
            hidden: true
          }, {
            header: 'Fin_Sector',
            dataIndex: 'Fin_Sector',
            width: 100
          }, {
            header: 'Fin_SubSector',
            dataIndex: 'Fin_SubSector',
            width: 100
          }, {
            header: 'Fin_Item',
            dataIndex: 'Fin_Item',
            width: 100
          }, {
            header: 'DEF_L1',
            dataIndex: 'DEF_L1',
            width: 100,
            hidden: true
          }, {
            header: 'DEF_L2',
            dataIndex: 'DEF_L2',
            width: 100,
            hidden: true
          }, {
            header: 'Sub_UrUnitName_To',
            dataIndex: 'Sub_UrUnitName_To',
            width: 100
          }, {
            header: 'Sub_OrgUnitName_To',
            dataIndex: 'Sub_OrgUnitName_To',
            width: 100
          }, {
            header: 'Agent_Type',
            dataIndex: 'Agent_Type',
            width: 100,
            hidden: true
          }, {
            header: 'UR_Format_AG',
            dataIndex: 'UR_Format_AG',
            width: 100,
            hidden: true
          }, {
            header: 'Agent_Name',
            dataIndex: 'Agent_Name',
            width: 100,
            hidden: true
          }, {
            header: 'TCS_Istochnik_From',
            dataIndex: 'TCS_Istochnik_From',
            width: 100
          }, {
            header: 'TCS_Istochnik_From_Kategory',
            dataIndex: 'TCS_Istochnik_From_Kategory',
            width: 100
          }, {
            header: 'TCS_Type_From',
            dataIndex: 'TCS_Type_From',
            width: 100
          }, {
            header: 'TCS_Vid_From',
            dataIndex: 'TCS_Vid_From',
            width: 100,
            hidden: true
          }, {
            header: 'UR_Format_KL',
            dataIndex: 'UR_Format_KL',
            width: 100
          }, {
            header: 'TCS_Residence',
            dataIndex: 'TCS_Residence',
            width: 100
          }, {
            header: 'Sub_UrUnitName_From',
            dataIndex: 'Sub_UrUnitName_From',
            width: 100
          }, {
            header: 'Prod_Klass',
            dataIndex: 'Prod_Klass',
            width: 100
          }, {
            header: 'Prod_Group',
            dataIndex: 'Prod_Group',
            width: 100
          }, {
            header: 'Prod_SubGroup',
            dataIndex: 'Prod_SubGroup',
            width: 100
          }, {
            header: 'Prod_Residence',
            dataIndex: 'Prod_Residence',
            width: 100
          }, {
            header: 'Prod_ShortName',
            dataIndex: 'Prod_ShortName',
            width: 100
          }, {
            header: 'Event_MethodCalc',
            dataIndex: 'Event_MethodCalc',
            width: 100
          }, {
            header: 'TaxGroup',
            dataIndex: 'TaxGroup',
            width: 100
          }, {
            header: 'Instr_Type',
            dataIndex: 'Instr_Type',
            width: 100
          }],
          features: [filters],
          dockedItems: [{
            xtype: 'toolbar',
            dock: 'top',
            items: [{
              iconCls: 'icon-refresh',
              text: 'Обновить',
              scope: this,
              handler: this.onRefreshClick
            }, {
              iconCls: 'icon-add',
              text: 'Добавить',
              scope: this,
              handler: this.onAddClick
            }, {
              //iconCls: 'icon-change',
              text: 'Изменить',
              disabled: true,
              itemId: 'change',
              scope: this,
              handler: this.onChangeClick
            }, {
              text: 'Скопировать',
              disabled: true,
              itemId: 'copy',
              scope: this,
              handler: this.onCopyClick
            }, {
              iconCls: 'icon-delete',
              text: 'Удалить',
              disabled: true,
              itemId: 'delete',
              scope: this,
              handler: this.onDeleteClick
            }, {
              text: 'Очистить фильтр',
              itemId: 'clearFilter',
              scope: this,
              handler: this.onClearFilterClick
            }, '->', @Html.Partial("MenuFin")]
          }, {
            xtype: 'pagingtoolbar',
            dock: 'bottom',
            displayInfo: true,
            listeners: {
              scope: this,
              beforerender: function () { this.dockedItems.items[2].bindStore(this.store); }
            }
          }]
        })
        this.callParent();
        this.getSelectionModel().on('selectionchange', this.onSelectChange, this);
        this.on('itemdblclick', this.onRowDblClick, this);
      },

      onClearFilterClick: function () {
        this.filters.clearFilters();
        this.onRefreshClick();
      },

      onRefreshClick: function () {
        this.store.load();
      },

      onCreateWin: function () {
        this.wini = Ext.create('FDS.Win', {
          scope: this,
          listeners: {
            scope: this,
            create: function (form, data) {
              this.store.insert(0, data);
              this.store.sync();
            },
            update: function () {
              this.store.sync();
            }
          }
        });
      },

      onAddClick: function () {
        var rec = new FDS();
        if (!this.wini) {
          this.onCreateWin();
        }
        this.wini.setTitle('Добавить');
        this.wini.setActiveRecord(rec);
        this.wini.show(this);
      },

      onCopyClick: function () {
        if (!this.wini) {
          this.onCreateWin();
        }
        this.wini.setTitle('Добавить');
        this.wini.setActiveRecord(this.getSelectionModel().getSelection()[0]);
        this.wini.show(this);
      },

      onChangeClick: function () {
        if (!this.wini) {
          this.onCreateWin();
        }
        this.wini.setTitle('Изменить');
        this.wini.setActiveRecord(this.getSelectionModel().getSelection()[0]);
        this.wini.show(this);
      },

      onSelectChange: function (selModel, selections) {
        this.down('#delete').setDisabled(selections.length === 0);
        this.down('#change').setDisabled(selections.length === 0);
        this.down('#copy').setDisabled(selections.length === 0);
      },

      onRowDblClick: function () {
        this.onChangeClick();
      },

      onSync: function () {
        this.store.sync();
      },

      onDeleteClick: function () {
        var selection = this.getView().getSelectionModel().getSelection()[0];
        if (selection) {
          if (window.confirm('Удалить стр.?')) {
            this.store.remove(selection);
            this.onSync();
          }
        }
      }
    });

    Ext.onReady(function () {
      var wini;

      Ext.apply(Ext.ux.grid.FiltersFeature.prototype, {
        menuFilterText: "Фильтр"
      });

      var store = Ext.create('Ext.data.Store', {
        pageSize: 50,
        remoteSort: true,
        autoSync: false,
        autoLoad: false,
        model: 'FDS',
        proxy: {
          type: 'ajax',
          api: {
            read: '@Url.Action("FDSList")',
            create: '@Url.Action("FDSCreate")',
            update: '@Url.Action("FDSUpdate")',
            destroy: '@Url.Action("FDSDel")'
          },
          actionMethods: { read: 'POST' },
          reader: {
            type: 'json',
            root: 'data',
            totalProperty: 'totalCount'
          },
          writer: {
            type: 'json',
            root: 'data',
            writeAllFields: true,
            allowSingle: false,
            encode: false
          },
          simpleSortMode: true
        }
      });

      Ext.create('Ext.Viewport', {
        layout: 'border',
        items: [{
          region: 'north',
          border: false,
          contentEl: 'header'
        }, {
          itemId: 'grid',
          xtype: 'fdsgrid',
          flex: 1,
          store: store
        }]
      });

    });
  </script>
}