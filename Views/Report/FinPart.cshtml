@{
  ViewBag.Title = "Доли активов";
}
@section scripts {
  <style type="text/css">
    .icon-user-add
    {
      background-image: url(@Href("~/Content/images/user_add.png")) !important;
    }
    .icon-save
    {
      background-image: url(@Href("~/Content/images/save.gif")) !important;
    }
    .icon-add
    {
      background-image: url(@Href("~/Content/images/add.png")) !important;
    }
    .icon-delete
    {
      background-image: url(@Href("~/Content/images/delete.png")) !important;
    }
    .icon-refresh
    {
      background-image: url(@Href("~/Scripts/ExtJS41/resources/themes/images/default/grid/refresh.gif")) !important;
    }
    .x-grid-row-summary .x-grid-cell-inner {
      font-weight: bold;
      font-size: 11px;
    }

  </style>
  <link href="~/Scripts/ExtJS41/resources/css/ext-all.css" rel="stylesheet" type="text/css" />
  <script src="~/Scripts/ExtJS41/bootstrap.js" type="text/javascript"></script>
  <script src="~/Scripts/ExtJS41/ext-lang-ru.js" type="text/javascript"></script>
  <script type="text/javascript">

    Ext.define('Ext.ux.CustomNumber', {
      extend: 'Ext.form.field.Number',
      alias: 'widget.customnumber',

      rawToValue: function (rawValue) {
        var value = this.fixPrecision(this.parseValue(rawValue));
        if (value === null) {
          value = rawValue || null;
        }
        return value + '';
      }
    });

    Ext.define('FinPart', {
      extend: 'Ext.data.Model',
      idProperty: 'TreatyID,ObjClsID',
      fields: ['TreatyID', 'ObjClsID', 'ocName', 'Qty', 'Part', 'trName', 'fiName', 'ID1', 'ID2', 'ID3', 'ID4', 'Value1', 'Value2', 'Value3', 'Value4', { name: 'Dt', type: 'date', dateFormat: "c" }]
    });

    Ext.define('FinPart.Grid', {
      extend: 'Ext.grid.Panel',
      alias: 'widget.finpartgrid',
      initComponent: function () {
        Ext.apply(this, {
          wini: null,
          region: 'center',
          defaultType: 'textfield',
          layoutConfig: { labelSeparator: '' },
          plugins: [Ext.create('Ext.grid.plugin.RowEditing')],
          features: [{
            ftype: 'groupingsummary',
            hideGroupedHeader: true,
            groupHeaderTpl: Ext.create('Ext.XTemplate',
              '{columnName}: {name}',
              {
                formatName: function (name) {
                  return Ext.util.Format.date(name, 'd.m.Y');
                }
              }
            )
          }],
          columns: [{
            header: 'Договор',
            dataIndex: 'trName',
            width: 150
          }, {
            header: 'Клиент',
            dataIndex: 'fiName',
            width: 250
          }, {
            header: 'Актив',
            dataIndex: 'ocName',
            width: 120
          }, {
            header: 'Стоимость',
            dataIndex: 'Qty',
            xtype: 'numbercolumn',
            align: 'right',
            width: 110,
            summaryType: 'sum',
            summaryRenderer: Ext.util.Format.numberRenderer('0,0.00')
          }, {
            header: 'Доля',
            dataIndex: 'Part',
            xtype: 'numbercolumn',
            align: 'right',
            width: 80,
            summaryType: 'sum',
            summaryRenderer: Ext.util.Format.numberRenderer('0,0.00')
          }, {
            header: '1 квартал',
            dataIndex: 'Value1',
            width: 120,
            xtype: 'numbercolumn',
            align: 'right',
            field: {
              xtype: 'customnumber',
              hideTrigger: true,
              keyNavEnabled: false,
              mouseWheelEnabled: false,
              autoStripChars: true
            },
            summaryType: 'sum',
            summaryRenderer: Ext.util.Format.numberRenderer('0,0.00')
          }, {
            header: '2 квартал',
            dataIndex: 'Value2',
            width: 120,
            xtype: 'numbercolumn',
            align: 'right',
            field: {
              xtype: 'customnumber',
              hideTrigger: true,
              keyNavEnabled: false,
              mouseWheelEnabled: false,
              autoStripChars: true
            },
            summaryType: 'sum',
            summaryRenderer: Ext.util.Format.numberRenderer('0,0.00')
          }, {
            header: '3 квартал',
            dataIndex: 'Value3',
            width: 120,
            xtype: 'numbercolumn',
            align: 'right',
            field: {
              xtype: 'customnumber',
              hideTrigger: true,
              keyNavEnabled: false,
              mouseWheelEnabled: false,
              autoStripChars: true
            },
            summaryType: 'sum',
            summaryRenderer: Ext.util.Format.numberRenderer('0,0.00')
          }, {
            header: '4 квартал',
            dataIndex: 'Value4',
            width: 120,
            xtype: 'numbercolumn',
            align: 'right',
            field: {
              xtype: 'customnumber',
              hideTrigger: true,
              keyNavEnabled: false,
              mouseWheelEnabled: false,
              autoStripChars: true
            },
            summaryType: 'sum',
            summaryRenderer: Ext.util.Format.numberRenderer('0,0.00')
          }, {
            header: 'ID',
            dataIndex: 'TreatyID',
            hidden: true,
            width: 100
          }],
          dockedItems: [{
            xtype: 'toolbar',
            dock: 'top',
            items: [{
              xtype: 'tbtext', text: ' Год: '
            }, {
              xtype: 'datefield',
              id: 'Date',
              name: 'Date',
              allowBlank: false,
              format: 'd.m.Y',
              startDay: 1,
              width: 90,
              margin: '0 5 0 0',
              value: Ext.Date.add(Ext.Date.clearTime(new Date(), false), Ext.Date.DAY, -new Date().getDate())
            }, {
              iconCls: 'icon-refresh',
              text: 'Обновить',
              scope: this,
              handler: this.onRefreshClick
            }, '->', @Html.Partial("MenuFin")]
          }, {
            xtype: 'pagingtoolbar',
            dock: 'bottom',
            displayInfo: true,
            listeners: {
              scope: this,
              beforerender: function () { this.dockedItems.items[2].bindStore(this.store); }
            }
          }]
        });
        this.callParent();
      },

      onRefreshClick: function () {
        this.store.proxy.extraParams = { dt: Ext.getCmp('Date').value };
        this.store.load();
      }
    });

    Ext.onReady(function () {

      Ext.apply(Ext.grid.RowEditor.prototype, {
        saveBtnText: "Сохранить",
        cancelBtnText: "Отменить"
      });

      var store = Ext.create('Ext.data.Store', {
        pageSize: 500,
        remoteSort: true,
        autoSync: true,
        autoLoad: false,
        groupField: 'trName',
        model: 'FinPart',
        proxy: {
          type: 'ajax',
          api: {
            read: '@Url.Action("FinPartList")',
            update: '@Url.Action("FinPartUpdate")'
          },
          actionMethods: { read: 'POST' },
          reader: {
            type: 'json',
            root: 'data',
            totalProperty: 'totalCount'
          },
          writer: {
            type: 'json',
            root: 'data',
            writeAllFields: true,
            allowSingle: false,
            encode: false
          },
          simpleSortMode: true
        }
      });

      Ext.create('Ext.Viewport', {
        layout: 'border',
        items: [{
          region: 'north',
          border: false,
          contentEl: 'header'
        }, {
          itemId: 'grid',
          xtype: 'finpartgrid',
          store: store
        }]
      });

    });

  </script>
}