@{
  ViewBag.Title = "ФинОтчет";
  Layout = "~/Views/Shared/_Layout.cshtml";
}
@section scripts {
  <style type="text/css">
    .x-panel-body-default
    {
      border-width: 0px;
    }

    .search-item
    {
      font: normal 11px tahoma, arial, helvetica, sans-serif;
      padding: 3px 10px 3px 10px; /*border: 1px solid #fff;
      border-bottom: 1px solid #eeeeee;*/
      white-space: normal;
      color: #555;
    }

    .search-item h3
    {
      display: block;
      font: inherit;
      font-weight: bold;
      color: #222;
    }

    #msg-div
    {
      position: absolute;
      left: 35%;
      bottom: 10px;
      width: 300px;
      z-index: 20000;
    }

      #msg-div .msg
      {
        border-radius: 8px;
        -moz-border-radius: 8px;
        background: #F6F6F6;
        border: 2px solid #ccc;
        margin-top: 2px;
        padding: 10px 15px;
        color: #555;
      }

        #msg-div .msg h3
        {
          margin: 0 0 8px;
          font-weight: bold;
          font-size: 15px;
        }

        #msg-div .msg p
        {
          margin: 0;
        }
  </style>
  <link href="~/Scripts/ExtJS41/resources/css/ext-all.css" rel="stylesheet" type="text/css" />
  <script src="~/Scripts/ExtJS41/bootstrap.js" type="text/javascript"></script>
  <script src="@Url.Content("~/Scripts/ExtJS41/ext-lang-ru.js") " type="text/javascript"></script>
  <script type="text/javascript">

    function getFormValues(form, useDataValues) {
      var values = [];
      form.getFields().each(function (field) {
        var data = field[useDataValues ? 'getModelData' : 'getSubmitData']();
        if (Ext.isObject(data)) {
          Ext.iterate(data, function (name, val) {
            if (val === '') {
              val = field.emptyText || '';
            }
            values.push({ ocp: name, oc: val });
          });
        }
      });
      return values;
    }

    Ext.example = function () {
      var msgCt;

      function createBox(t, s) {
        return '<div class="msg"><h3>' + t + '</h3><p>' + s + '</p></div>';
      }
      return {
        msg: function (title, format) {
          if (!msgCt) {
            msgCt = Ext.DomHelper.insertFirst(document.body, { id: 'msg-div' }, true);
          }
          var s = Ext.String.format.apply(String, Array.prototype.slice.call(arguments, 1));
          var m = Ext.DomHelper.append(msgCt, createBox(title, s), true);
          m.hide();
          m.slideIn('t').ghost("t", { delay: 1000, remove: true });
        },

        init: function () {
          if (!msgCt) {
            msgCt = Ext.DomHelper.insertFirst(document.body, { id: 'msg-div' }, true);
          }
        }
      };
    }();


    Ext.onReady(Ext.example.init, Ext.example);

    Ext.onReady(function () {
      @{var r = ModelMetadata.FromLambdaExpression(m => m, ViewData).Properties.ToList();}

      Ext.define('CbModel', {
        extend: 'Ext.data.Model',
        idProperty: 'id',
        fields: ['id', 'name', 'brief']
      });

      Ext.define('DataModel', {
        extend: 'Ext.data.Model',
        idProperty: 'ObjClassifierID',
        fields: ['ObjClassifierID', 'Name', 'NameBrief']
      });

      var fp = Ext.create('Ext.form.Panel', {
        activeItem: 0,
        renderTo: 'f',
        labelAlign: 'top',
        plain: true,
        title: 'ФинОтчет',
        frame: true,
        width: 700,
        bodyStyle: 'padding:5px 5px 0',
        defaultType: 'textfield',
        layoutConfig: { labelSeparator: '' },
        defaults: { anchor: '100%' },
        fieldDefaults: {
          labelAlign: 'top'
        },
        layout: {
          type: 'vbox',
          autoSize: true,
          align: 'stretch'  // Child items are stretched to full width
        },
        items: [{
          xtype: 'combo',
          id: 'cbClient',
          store: Ext.create('Ext.data.Store', {
            model: 'CbModel',
            proxy: {
              type: 'ajax',
              url: '@Url.Action("GetTreaties")',
              reader: {
                type: 'json',
                root: 'data'
              }
            }
          }),
          valueField: 'id',
          name: 'tid',
          displayField: 'brief',
          typeAhead: false,
          queryDelay: 1000,
          hideTrigger: true,
          forceSelection: true,
          fieldLabel: 'Договор',
          minChars: 2,
          isFormField: false,
          submitValue: false,
          listConfig: {
            getInnerTpl: function () {
              return '<div class="search-item"><h3>{brief}</h3>{name}</div>';
            }
          },
          itemSelector: 'div.search-item',
          allowBlank: false,
          listeners: {
            select: function (f, value) {
              fp.form.reset();
              fp.getForm().load({ url: '@Url.Action("GetFinRepData")', params: { id: value[0].data.id }, waitMsg: 'Загрузка' });
              Ext.MessageBox.hide();
            }
          }
        }, {
          xtype: 'fieldset',
          id: 'fs',
          title: 'Параметры',
          layout: 'anchor',
          defaults: {
            anchor: '100%'
          }
        }],
        buttons: [{
          text: 'Сохранить',
          handler: function () {
            if (fp.form.isValid()) {
              var d = getFormValues(fp.form, false);
              Ext.Ajax.request({
                url: '@Url.Action("SaveFinRep")',
                params: { id: fp.down('#cbClient').getValue() },
                jsonData: { data: d },
                success: function (f, a) { Ext.example.msg('Info', 'Сохранено'); },
                failure: function (f, a) { Ext.Msg.alert('Error', (a.result && a.result.message) ? a.result.message : 'Error'); }
              });
            }
          },
          formBind: true
        }],
        dockedItems: [{
          xtype: 'toolbar',
          dock: 'top',
          items: ['->', @Html.Partial("MenuFin")]
        }]
      });

      var store = Ext.create('Ext.data.Store', {
        autoLoad: true,
        model: 'DataModel',
        proxy: {
          type: 'ajax',
          url: '@Url.Action("GetFinRepForm")',
          actionMethods: { read: 'POST' },
          reader: {
            type: 'json',
            root: 'data'
          }
        },
        listeners: {
          load: function (store, records, successful, operation) {
            Ext.Array.forEach(records, function (s) {
              var cb = Ext.create('Ext.form.field.ComboBox', {
                store: Ext.create('Ext.data.Store', {
                  autoLoad: true,
                  model: 'CbModel',
                  proxy: {
                    type: 'ajax',
                    url: '@Url.Action("GetObjClsByParent")' + '/' + s.data.ObjClassifierID,
                    actionMethods: { read: 'POST' },
                    reader: {
                      type: 'json',
                      root: 'data'
                    }
                  },
                  listeners: {
                    load: function (store, records, successful, operation) {
                      records
                      var r = Ext.ModelManager.create({
                        id: '',
                        name: '<Пусто>',
                        brief: '<Пусто>'
                      }, 'CbModel');
                      store.insert(0, r);
                    }
                  }
                }),
                displayField: 'name',
                valueField: 'id',
                typeAhead: false,
                queryMode: 'local',
                fieldLabel: s.data.Name,
                forceSelection: true,
                triggerAction: 'all',
                selectOnFocus: true,
                id: s.data.ObjClassifierID,
                name: s.data.ObjClassifierID,
                allowBlank: true,
                itemSelector: 'div.search-item'
              });
              fp.down("#fs").add(cb);
            });
            //fp.render('f');
          }
        }
      });
    });
  </script>
}
<div id="f" style="padding: 30px">
</div>
