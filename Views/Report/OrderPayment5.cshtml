@{
  ViewBag.Title = "Распоряжения на оплату";
  Layout = "~/Views/Shared/_Layout.cshtml";
}
@section scripts {
  <style type="text/css">
    .icon-user-add
    {
      background-image: url(@Href("~/Content/images/user_add.png")) !important;
    }
    .icon-save
    {
      background-image: url(@Href("~/Content/images/save.gif")) !important;
    }
    .icon-add
    {
      background-image: url(@Href("~/Content/images/add.png")) !important;
    }
    .icon-delete
    {
      background-image: url(@Href("~/Content/images/delete.png")) !important;
    }
    .icon-refresh
    {
      background-image: url(@Href("~/Scripts/ExtJS41/resources/themes/images/default/grid/refresh.gif")) !important;
    }
    .upload-icon
    {
      background-image: url(@Href("~/Content/images/image_add.png")) !important;
    }
    td.wrap-text div {
      white-space: normal;
    }
  </style>
  <link rel="stylesheet" type="text/css" href="http://cdn.sencha.com/ext/gpl/5.1.0/build/packages/ext-theme-classic/build/resources/ext-theme-classic-all.css">
  <script type="text/javascript" src="http://cdn.sencha.com/ext/gpl/5.1.0/build/bootstrap.js"></script>
  <script src="~/Scripts/ExtJS5/ux/Exporter.js" type="text/javascript"></script>
  <script type="text/javascript" src="http://cdn.sencha.com/ext/gpl/5.1.0/build/packages/ext-locale/build/ext-locale-ru.js"></script>
  @*  <link href="~/Scripts/ExtJS41/ux/grid/css/GridFilters.css" rel="stylesheet" type="text/css" />
  <link href="~/Scripts/ExtJS41/ux/grid/css/RangeMenu.css" rel="stylesheet" type="text/css" />
  <script src="~/Scripts/ExtJS41/ext-lang-ru.js" type="text/javascript"></script>*@
  <script type="text/javascript">

    Ext.Loader.setConfig({ enabled: true });

    Ext.apply(Ext.util.Format, {
      thousandSeparator: ' ',
      decimalSeparator: '.'
    });

    Ext.define('OrdPaym', {
      extend: 'Ext.data.Model',
      idProperty: 'id',
      fields: [
        'id', 'Number', 'FinInstID', 'NameBrief', 'DocTypeID', 'DocTypeName', 'DocNumb', 'Dogovor', 'Receiver', 'ExecutorID', 'ExecutorName',
        { name: 'DateCreate', type: 'date', dateFormat: "c" }, { name: 'DateDoc', type: 'date', dateFormat: "c" }, { name: 'DatePay', type: 'date', dateFormat: "c" },
        'IsBudget', 'IsBudgetS', 'FundID', 'FundName', { name: 'PlatNumb', type: 'string' }
      ]
    });

    Ext.create('Ext.data.Store', {
      storeId: 'storeOrdPaym',
      pageSize: 50,
      remoteSort: true,
      autoSync: false,
      autoLoad: false,
      model: 'OrdPaym',
      proxy: {
        type: 'ajax',
        api: {
          read: '@Url.Action("OrderPaymentList")',
          create: '@Url.Action("OrderPaymentCreate")',
          update: '@Url.Action("OrderPaymentUpdate")',
          destroy: '@Url.Action("OrderPaymentDel")'
        },
        actionMethods: { read: 'POST' },
        reader: {
          type: 'json',
          root: 'data',
          totalProperty: 'totalCount'
        },
        writer: {
          type: 'json',
          root: 'data',
          writeAllFields: true,
          allowSingle: false,
          encode: false
        },
        simpleSortMode: true
      }
    });
    Ext.define('OrdPaymDet', {
      extend: 'Ext.data.Model',
      idProperty: 'id',
      fields: ['id', 'OrdPaymID', 'Item', 'PFP', 'Qty', 'VAT', 'Comment', 'TypeID', 'TypeName']
    });

    Ext.create('Ext.data.Store', {
      storeId: 'storeOrdPaymDet',
      model: 'OrdPaymDet',
      pageSize: 50,
      remoteSort: true,
      autoSync: false,
      autoLoad: false,
      proxy: {
        type: 'ajax',
        api: {
          read: '@Url.Action("OrderPaymDetList")',
          create: '@Url.Action("OrderPaymDetCreate")',
          update: '@Url.Action("OrderPaymDetUpdate")',
          destroy: '@Url.Action("OrderPaymDetDel")'
        },
        actionMethods: { read: 'POST' },
        reader: {
          type: 'json',
          root: 'data',
          totalProperty: 'totalCount'
        },
        writer: {
          type: 'json',
          root: 'data',
          writeAllFields: true,
          allowSingle: false,
          encode: false
        },
        simpleSortMode: true
      }
    });

    Ext.define('CbModel', {
      extend: 'Ext.data.Model',
      //idProperty: 'Value',
      fields: ['Text', 'Value']
    });

    Ext.define('Cbox', {
      extend: 'Ext.data.Model',
      idProperty: 'id',
      fields: ['id', 'name']
    });

    Ext.create('Ext.data.Store', {
      storeId: 'storeFund',
      model: 'Cbox',
      autoLoad: true,
      proxy: {
        type: 'ajax',
        actionMethods: { read: 'POST' },
        url: '@Url.Action("GetPaymFunds")',
        reader: {
          type: 'json',
          root: 'data'
        }
      }
    });

    Ext.create('Ext.data.Store', {
      storeId: 'storeDocType',
      model: 'CbModel',
      autoLoad: true,
      proxy: {
        type: 'ajax',
        actionMethods: { read: 'POST' },
        url: '@Url.Action("GetDocType")',
        reader: {
          type: 'json',
          root: 'data'
        }
      }
    });

    Ext.create('Ext.data.Store', {
      storeId: 'storeFI',
      model: 'CbModel',
      autoLoad: true,
      proxy: {
        type: 'ajax',
        actionMethods: { read: 'POST' },
        url: '@Url.Action("GetPlatList")',
        reader: {
          type: 'json',
          root: 'data'
        }
      }
    });

    Ext.create('Ext.data.Store', {
      storeId: 'storeExecutor',
      model: 'CbModel',
      autoLoad: true,
      proxy: {
        type: 'ajax',
        actionMethods: { read: 'POST' },
        url: '@Url.Action("GetExecutor")',
        reader: {
          type: 'json',
          root: 'data'
        }
      }
    });

    Ext.create('Ext.data.Store', {
      storeId: 'storeType',
      model: 'CbModel',
      autoLoad: true,
      proxy: {
        type: 'ajax',
        actionMethods: { read: 'POST' },
        url: '@Url.Action("GetPlatType")',
        reader: {
          type: 'json',
          root: 'data'
        }
      }
    });

    var filters = {
      ftype: 'filters',
      encode: true,
      local: false,
      autoReload: false
    };

    Ext.define('Ext.ux.CustomNumber', {
      extend: 'Ext.form.field.Number',
      alias: 'widget.customnumber',

      rawToValue: function (rawValue) {
        var value = this.fixPrecision(this.parseValue(rawValue));
        if (value === null) {
          value = rawValue || null;
        }
        return value + '';
      }
    });

    Ext.define('OrdPaym.Win', {
      extend: 'Ext.window.Window',
      alias: 'widget.ordpaymwin',
      initComponent: function () {
        Ext.apply(this, {
          activeRecord: null,
          width: 500,
          closeAction: 'hide',
          layout: 'fit',
          modal: true,
          autoHeight: true,
          plain: true,
          buttonAlign: 'center',
          border: true,
          items: [{
            xtype: 'form',
            bodyPadding: 10,
            defaults: { anchor: '100%' },
            defaultType: 'textfield',
            layoutConfig: { labelSeparator: '' },
            fieldDefaults: { labelWidth: 125, labelAlign: 'right' },
            items: [{
              xtype: 'datefield',
              name: 'DateCreate',
              fieldLabel: 'Дата составления',
              anchor: '50%',
              format: 'd.m.Y',
              startDay: 1
            }, {
              name: 'Number',
              fieldLabel: 'Номер распоряжения',
              anchor: '50%'
            }, {
              xtype: 'checkbox',
              name: 'IsBudget',
              fieldLabel: 'Бюджет'
            }, {
              xtype: 'combo',
              name: 'FinInstID',
              store: 'storeFI',
              fieldLabel: 'Плательщик',
              displayField: 'Text',
              valueField: 'Value',
              typeAhead: true,
              queryMode: 'local',
              emptyText: '*',
              selectOnFocus: true,
              width: 160
            }, {
              xtype: 'combo',
              name: 'DocTypeID',
              store: 'storeDocType',
              fieldLabel: 'Вид документа',
              displayField: 'Text',
              valueField: 'Value',
              typeAhead: true,
              queryMode: 'local',
              emptyText: '*',
              selectOnFocus: true,
              anchor: '50%'
            }, {
              xtype: 'datefield',
              name: 'DateDoc',
              fieldLabel: 'Дата документа',
              anchor: '50%',
              format: 'd.m.Y',
              startDay: 1
            }, {
              name: 'DocNumb',
              fieldLabel: 'Номер документа',
              anchor: '50%'
            }, {
              name: 'Dogovor',
              fieldLabel: 'Договор'
            }, {
              xtype: 'combo',
              name: 'FundID',
              store: 'storeFund',
              fieldLabel: 'Валюта документа',
              displayField: 'name',
              valueField: 'id',
              typeAhead: true,
              queryMode: 'local',
              emptyText: '*',
              selectOnFocus: true,
              anchor: '50%'
            }, {
              xtype: 'combo',
              name: 'Receiver',
              store: Ext.create('Ext.data.Store', {
                fields: ['Text', 'Value'],
                proxy: {
                  type: 'ajax',
                  actionMethods: { read: 'POST' },
                  url: '@Url.Action("GetPoluch1")',
                  reader: {
                    type: 'json',
                    root: 'data'
                  }
                }
              }),
              valueField: 'Value',
              displayField: 'Value',
              typeAhead: false,
              queryDelay: 500,
              hideTrigger: true,
              forceSelection: false,
              fieldLabel: 'Получатель',
              minChars: 2
            }, {
              xtype: 'combo',
              name: 'ExecutorID',
              store: 'storeExecutor',
              fieldLabel: 'Исполнитель',
              displayField: 'Text',
              valueField: 'Value',
              typeAhead: true,
              queryMode: 'local',
              emptyText: '*',
              selectOnFocus: true,
              anchor: '50%'
            }, {
              xtype: 'datefield',
              name: 'DatePay',
              fieldLabel: 'Дата оплаты',
              anchor: '50%',
              startDay: 1
            }, {
              name: 'PlatNumb',
              fieldLabel: 'Номер платежки',
              anchor: '50%'
            }],
            listeners: {
              //'actioncomplete': this.onActionComplete
            }
          }],
          dockedItems: [{
            xtype: 'toolbar',
            dock: 'bottom',
            ui: 'footer',
            items: ['->', {
              iconCls: 'icon-save',
              itemId: 'save',
              text: 'Сохранить',
              disabled: true,
              scope: this,
              handler: this.onSave
            }, {
              //iconCls: 'icon-cancel',
              text: 'Отмена',
              scope: this,
              handler: this.onCancel
            }]
          }]
        });
        //this.items[0].getForm().on('actioncomplete', this.onActionComplete, this);
        this.callParent();
      },

      onActionComplete: function (form, action) {
        if (action.type == 'load') {
          var c = this.getForm().findField('Receiver');
          var f = action.result.data.Receiver;
          var l = function (r) {
            c.setValue(f);
            c.store.un('load', l);
          };
          c.store.on('load', l);
          c.store.load({ params: { id: f } });
        }
      },

      setActiveRecord: function (record) {
        var me = this;
        var form = me.down('form').getForm();
        me.activeRecord = record;
        if (record) {
          this.down('#save').enable();
          //form.reset();
          form.loadRecord(record);
        } else {
          me.down('#save').disable();
          form.reset();
        }
      },

      onSave: function () {
        var active = this.activeRecord, form = form = this.down('form').getForm();
        if (!active) {
          return;
        }
        if (form.isValid()) {
          if (this.title == 'Добавить') {
            this.fireEvent('create', this, form.getValues(false, false, false, true));
            //form.reset();
          }
          else {
            form.updateRecord(active);
            this.fireEvent('update');
            //form.reset();
          }
          this.hide();
        }
      },

      onCancel: function () {
        this.hide();
      }
    });

    Ext.define('OrdPaym.Grid', {
      extend: 'Ext.grid.Panel',
      alias: 'widget.ordpaymgrid',
      initComponent: function () {
        Ext.apply(this, {
          win: null,
          plugins: 'gridfilters',
          defaultType: 'textfield',
          layoutConfig: { labelSeparator: '' },
          columns: [{
            header: 'Дата составления',
            dataIndex: 'DateCreate',
            renderer: Ext.util.Format.dateRenderer('d.m.Y'),
            width: 100
          }, {
            header: 'Номер распоряжения',
            dataIndex: 'Number',
            width: 80,
            editor: {
              allowBlank: false
            }
          }, {
            header: 'Бюджет',
            dataIndex: 'IsBudgetS',
            width: 50
          }, {
            header: 'Плательщик',
            dataIndex: 'NameBrief',
            filter: {
              type: 'string'
            },
            width: 150
          }, {
            header: 'Вид документа',
            dataIndex: 'DocTypeName',
            width: 90
          }, {
            header: 'Дата документа',
            dataIndex: 'DateDoc',
            renderer: Ext.util.Format.dateRenderer('d.m.Y'),
            width: 90
          }, {
            header: 'Номер документа',
            dataIndex: 'DocNumb',
            width: 100
          }, {
            header: 'Договор',
            dataIndex: 'Dogovor',
            width: 150
          }, {
            header: 'Валюта',
            dataIndex: 'FundName',
            width: 50
          }, {
            header: 'Получатель',
            dataIndex: 'Receiver',
            filter: {
              type: 'string'
            },
            width: 150,
            tdCls: 'wrap-text'
          }, {
            header: 'Исполнитель',
            dataIndex: 'ExecutorName',
            width: 80
          }, {
            header: 'Дата оплаты',
            dataIndex: 'DatePay',
            renderer: Ext.util.Format.dateRenderer('d.m.Y'),
            width: 70
          }, {
            header: 'Номер платежки',
            dataIndex: 'PlatNumb',
            width: 90
          }],
          dockedItems: [{
            xtype: 'toolbar',
            dock: 'top',
            items: [{
              xtype: 'tbtext', text: ' Период: '
            }, {
              xtype: 'datefield',
              id: 'DateB',
              name: 'DateB',
              allowBlank: false,
              format: 'd.m.Y',
              vtype: 'daterange',
              endDateField: 'DateE',
              startDay: 1,
              width: 90,
              value: Ext.Date.add(Ext.Date.clearTime(new Date(), false), Ext.Date.DAY, -3)
            }, {
              xtype: 'datefield',
              id: 'DateE',
              name: 'DateE',
              allowBlank: false,
              format: 'd.m.Y',
              vtype: 'daterange',
              startDateField: 'DateB',
              startDay: 1,
              width: 90,
              margin: '0 5 0 0',
              value: Ext.Date.clearTime(new Date(), false)
            }, ' По дате оплаты: ', {
              xtype: 'checkbox',
              itemId: 'cbIsDatePay'
            }, {
              iconCls: 'icon-refresh',
              text: 'Обновить',
              scope: this,
              handler: this.onRefreshClick
            }, {
              iconCls: 'icon-add',
              text: 'Добавить',
              scope: this,
              handler: this.onAddClick
            }, {
              //iconCls: 'icon-change',
              text: 'Изменить',
              disabled: true,
              itemId: 'change',
              scope: this,
              handler: this.onChangeClick
            }, {
              text: 'Скопировать',
              disabled: true,
              itemId: 'copy',
              scope: this,
              handler: this.onCopyClick
            }, {
              iconCls: 'icon-delete',
              text: 'Удалить',
              disabled: true,
              itemId: 'delete',
              scope: this,
              handler: this.onDeleteClick
            }, {
              text: 'Форма',
              disabled: true,
              itemId: 'paymform',
              scope: this,
              handler: this.onPaymFormClick
            }, {
              text: 'Экспорт',
              itemId: 'export',
              scope: this,
              handler: this.onExportClick
            }, {
              text: 'Очистить фильтр',
              itemId: 'clearFilter',
              scope: this,
              handler: this.onClearFilterClick
            }, '->', @Html.Partial("MenuFin"), ' ']
          }/*, {
            xtype: 'pagingtoolbar',
            dock: 'bottom',
            displayInfo: true,
            listeners: {
              scope: this,
              beforerender: function () { this.dockedItems.items[2].bindStore(this.store); }
            }
          }*/]
        })
        this.callParent();
        this.getSelectionModel().on('selectionchange', this.onSelectChange, this);
        this.on('itemdblclick', this.onRowDblClick, this);
      },

      onClearFilterClick: function () {
        this.filters.clearFilters();
        this.onRefreshClick();
      },

      onPaymFormClick: function () {
        var form = Ext.getDom('paymform');
        var rec = this.getSelectionModel().getSelection()[0];
        form.id.value = rec.data.id;
        form.submit();
      },

      onRefreshClick: function () {
        this.store.proxy.extraParams = { db: Ext.getCmp('DateB').value, de: Ext.getCmp('DateE').value, IsDatePay: this.down('#cbIsDatePay').getValue() };
        this.store.load();
      },

      onCreateWin: function () {
        this.win = Ext.create('OrdPaym.Win', {
          scope: this,
          listeners: {
            scope: this,
            create: function (form, data) {
              this.store.insert(0, data);
              this.store.sync();
            },
            update: function () {
              this.store.sync();
            }
          }
        });
      },

      onAddClick: function () {
        var rec = Ext.create('OrdPaym', {
          //id: null,
          DateCreate: Ext.Date.clearTime(new Date(), false),
          DateDoc: Ext.Date.clearTime(new Date(), false),
          Number: '',
          FinInstID: 1790,
          DocTypeID: null,
          DocNumb: '',
          Dogovor: '',
          Receiver: '',
          ExecutorID: 1010,
          IsBudget: true,
          FundID: null
        });
        if (!this.win) {
          this.onCreateWin();
        }
        this.win.setTitle('Добавить');
        this.win.setActiveRecord(rec);
        this.win.show(this);
      },

      onCopyClick: function () {
        if (!this.win) {
          this.onCreateWin();
        }
        this.win.setTitle('Добавить');

        var rec = this.getSelectionModel().getSelection()[0];
        this.win.setActiveRecord(rec);
        this.win.show(this);
      },

      onChangeClick: function () {
        if (!this.win) {
          this.onCreateWin();
        }
        this.win.setTitle('Изменить');
        var rec = this.getSelectionModel().getSelection()[0];
        this.win.setActiveRecord(rec);
        this.win.show(this);
      },

      onSelectChange: function (selModel, selections) {
        this.down('#delete').setDisabled(selections.length === 0);
        this.down('#change').setDisabled(selections.length === 0);
        this.down('#copy').setDisabled(selections.length === 0);
        this.down('#paymform').setDisabled(selections.length === 0);
        var grid = this.up('viewport').down('#griddet');
        if (selections.length === 0) {
          grid.down('#create').setDisabled(true);
          grid.down('#refresh').setDisabled(true);
        }
        else {
          if (grid) {
            grid.store.proxy.extraParams = { id: this.getView().getSelectionModel().getSelection()[0].data.id };
            grid.store.load();
            grid.down('#create').setDisabled(false);
            grid.down('#refresh').setDisabled(false);
          }
        }

      },

      onRowDblClick: function () {
        this.onChangeClick();
      },

      onSync: function () {
        this.store.sync();
      },

      onDeleteClick: function () {
        var selection = this.getView().getSelectionModel().getSelection()[0];
        if (selection) {
          if (window.confirm('Удалить стр.?')) {
            this.store.remove(selection);
            this.onSync();
          }
        }
      },

      onExportClick: function () {
        var form = Ext.getDom('export');
        form.db.value = Ext.getCmp('DateB').rawValue;
        form.de.value = Ext.getCmp('DateE').rawValue;
        form.IsDatePay.value = this.down('#cbIsDatePay').rawValue;
        form.submit();
      }

    });

    Ext.define('OrdPaymDet.Win', {
      extend: 'Ext.window.Window',
      alias: 'widget.ordpaymdetwin',
      initComponent: function () {
        Ext.apply(this, {
          activeRecord: null,
          width: 500,
          closeAction: 'hide',
          layout: 'fit',
          modal: true,
          autoHeight: true,
          plain: true,
          buttonAlign: 'center',
          border: true,
          items: [{
            xtype: 'form',
            bodyPadding: 10,
            defaults: { anchor: '100%' },
            defaultType: 'textfield',
            layoutConfig: { labelSeparator: '' },
            fieldDefaults: { labelWidth: 125, labelAlign: 'right' },
            items: [{
              name: 'Item',
              fieldLabel: 'Статья',
              anchor: '50%'
            }, {
              name: 'PFP',
              fieldLabel: 'ПФП',
              anchor: '50%'
            }, {
              xtype: 'customnumber',
              name: 'Qty',
              fieldLabel: 'Сумма',
              allowDecimals: true,
              decimalPrecision: 2,
              anchor: '50%',
              hideTrigger: true,
              keyNavEnabled: false,
              mouseWheelEnabled: false,
              autoStripChars: true
            }, {
              xtype: 'customnumber',
              name: 'VAT',
              fieldLabel: 'В т.ч. НДС',
              allowDecimals: true,
              decimalPrecision: 2,
              anchor: '50%',
              hideTrigger: true,
              keyNavEnabled: false,
              mouseWheelEnabled: false,
              autoStripChars: true
            }, {
              xtype: 'combo',
              name: 'TypeID',
              store: 'storeType',
              fieldLabel: 'Тип платежа',
              displayField: 'Text',
              valueField: 'Value',
              typeAhead: true,
              queryMode: 'local',
              emptyText: '*',
              selectOnFocus: true,
              anchor: '50%'
            }, {
              name: 'Comment',
              fieldLabel: 'Экономическое содержание'
            }, {
              xtype: 'hidden',
              name: 'OrdPaymID'
            }],
            listeners: {
              //'actioncomplete': this.onActionComplete
            }
          }],
          dockedItems: [{
            xtype: 'toolbar',
            dock: 'bottom',
            ui: 'footer',
            items: ['->', {
              iconCls: 'icon-save',
              itemId: 'save',
              text: 'Сохранить',
              disabled: true,
              scope: this,
              handler: this.onSave
            }, {
              //iconCls: 'icon-cancel',
              text: 'Отмена',
              scope: this,
              handler: this.onCancel
            }]
          }]
        });
        this.callParent();
      },

      setActiveRecord: function (record) {
        var me = this;
        var form = me.down('form').getForm();
        me.activeRecord = record;
        if (record) {
          this.down('#save').enable();
          form.loadRecord(record);
        } else {
          me.down('#save').disable();
          form.reset();
        }
      },

      onSave: function () {
        var active = this.activeRecord, form = form = this.down('form').getForm();
        if (!active) {
          return;
        }
        if (form.isValid()) {
          if (this.title == 'Добавить') {
            this.fireEvent('create', this, form.getValues(false, false, false, true));
            //form.reset();
          }
          else {
            form.updateRecord(active);
            this.fireEvent('update');
            //form.reset();
          }
          this.hide();
        }
      },

      onCancel: function () {
        this.hide();
      }
    });

    Ext.define('OrdPaymDet.Grid', {
      extend: 'Ext.grid.Panel',
      alias: 'widget.ordpaymgriddet',
      initComponent: function () {
        Ext.apply(this, {
          win: null,
          defaultType: 'textfield',
          layoutConfig: { labelSeparator: '' },
          columns: [{
            header: 'Статья расходов',
            dataIndex: 'Item',
            width: 100
          }, {
            header: 'ПФП',
            dataIndex: 'PFP',
            width: 50
          }, {
            header: 'Сумма',
            dataIndex: 'Qty',
            width: 90,
            xtype: 'numbercolumn',
            align: 'right'
          }, {
            header: 'НДС',
            dataIndex: 'VAT',
            width: 90,
            xtype: 'numbercolumn',
            align: 'right'
          }, {
            header: 'Тип платежа',
            dataIndex: 'TypeName',
            width: 100
          }, {
            header: 'Экономическое содержание',
            dataIndex: 'Comment',
            width: 200
          }],
          dockedItems: [{
            xtype: 'toolbar',
            dock: 'top',
            items: [{
              iconCls: 'icon-refresh',
              disabled: true,
              scope: this,
              itemId: 'refresh',
              text: 'Обновить',
              handler: this.onRefreshClick
            }, {
              iconCls: 'icon-add',
              disabled: true,
              itemId: 'create',
              text: 'Добавить',
              scope: this,
              handler: this.onAddClick
            }, {
              //iconCls: 'icon-change',
              text: 'Изменить',
              disabled: true,
              itemId: 'change',
              scope: this,
              handler: this.onChangeClick
            }, {
              text: 'Скопировать',
              disabled: true,
              itemId: 'copy',
              scope: this,
              handler: this.onCopyClick
            }, {
              iconCls: 'icon-delete',
              text: 'Удалить',
              disabled: true,
              itemId: 'delete',
              scope: this,
              handler: this.onDeleteClick
            }]
          }]
        })
        this.callParent();
        this.getSelectionModel().on('selectionchange', this.onSelectChange, this);
        this.on('itemdblclick', this.onRowDblClick, this);
      },

      onRefreshClick: function () {
        this.store.proxy.extraParams = { id: this.store.proxy.extraParams.id };
        this.store.load();
      },

      onCreateWin: function () {
        this.win = Ext.create('OrdPaymDet.Win', {
          scope: this,
          listeners: {
            scope: this,
            create: function (form, data) {
              this.store.insert(0, data);
              this.store.sync();
            },
            update: function () {
              this.store.sync();
            }
          }
        });
      },

      onAddClick: function () {
        var rec = new OrdPaymDet({ /*id: null,*/ OrdPaymID: this.store.proxy.extraParams.id, Item: null, PFP: null, Qty: null, VAT: null, Comment: null, TypeID: 15186 });
        if (!this.win) {
          this.onCreateWin();
        }
        this.win.setTitle('Добавить');
        this.win.setActiveRecord(rec);
        this.win.show(this);
      },

      onCopyClick: function () {
        if (!this.win) {
          this.onCreateWin();
        }
        this.win.setTitle('Добавить');
        this.win.setActiveRecord(this.getSelectionModel().getSelection()[0]);
        this.win.show(this);
      },

      onChangeClick: function () {
        if (!this.win) {
          this.onCreateWin();
        }
        this.win.setTitle('Изменить');
        this.win.setActiveRecord(this.getSelectionModel().getSelection()[0]);
        this.win.show(this);
      },

      onSelectChange: function (selModel, selections) {
        this.down('#delete').setDisabled(selections.length === 0);
        this.down('#change').setDisabled(selections.length === 0);
        this.down('#copy').setDisabled(selections.length === 0);
      },

      onRowDblClick: function () {
        this.onChangeClick();
      },

      //onRefreshClick: function () {
      //  this.store.proxy.extraParams = { db: Ext.getCmp('DateB').value, de: Ext.getCmp('DateE').value, IsDatePay: this.down('#cbIsDatePay').getValue() };
      //  this.store.load();
      //},

      onSync: function () {
        this.store.sync();
      },

      onDeleteClick: function () {
        var selection = this.getView().getSelectionModel().getSelection()[0];
        if (selection) {
          if (window.confirm('Удалить стр.?')) {
            this.store.remove(selection);
            this.onSync();
          }
        }
      }
    });

    Ext.apply(Ext.form.VTypes, {
      daterange: function (val, field) {
        var date = field.parseDate(val);
        if (!date) {
          return false;
        }
        if (field.startDateField) {
          var start = Ext.getCmp(field.startDateField);
          if (!start.maxValue || (date.getTime() != start.maxValue.getTime())) {
            start.setMaxValue(date);
            start.validate();
          }
        }
        else if (field.endDateField) {
          var end = Ext.getCmp(field.endDateField);
          if (!end.minValue || (date.getTime() != end.minValue.getTime())) {
            end.setMinValue(date);
            end.validate();
          }
        }
        /*
        * Always return true since we're only using this vtype to set the
        * min/max allowed values (these are tested for after the vtype test)
        */
        return true;
      }
    });

    Ext.onReady(function () {
      //var win;

      Ext.apply(Ext.grid.filters.Filters.prototype, {
        menuFilterText: "Фильтр"
      });

      Ext.apply(Ext.grid.filters.filter.String.prototype, {
        emptyText: 'Текст фильтра...'
      });

      Ext.apply(Ext.util.Format, {
        thousandSeparator: ' ',
        decimalSeparator: '.',
        // Russian Ruble
        dateFormat: 'd.m.Y'
      });

      Ext.create('Ext.Viewport', {
        layout: 'border',
        items: [{
          region: 'north',
          border: false,
          contentEl: 'header'
        }, {
          region: 'center',
          itemId: 'grid',
          xtype: 'ordpaymgrid',
          store: 'storeOrdPaym'
        }, {
          region: 'south',
          height: '20%',
          itemId: 'griddet',
          border: false,
          xtype: 'ordpaymgriddet',
          store: 'storeOrdPaymDet',
          split: true
        }]
      });

    });
  </script>
}
<form id="export" action="@Url.Action("OrdPaymExcel")" method="POST" style="display: none;">
  <input type="hidden" name="db" />
  <input type="hidden" name="de" />
  <input type="hidden" name="IsDatePay" />
</form>
<form id="paymform" action="@Url.Action("OrdPaymForm")" method="POST" style="display: none;">
  <input type="hidden" name="id" />
</form>
