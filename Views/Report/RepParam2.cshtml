@model MO.Models.Rep1Param
@{
  Layout = "~/Views/Shared/_Layout.cshtml";
}
@section scripts {
  <style type="text/css">
    .icon-user-add
    {
      background-image: url(@Url.Content("~/Content/images/user_add.png")) !important;
    }
    .icon-refresh
    {
      background-image: url(@Url.Content("~/Scripts/ExtJS41/resources/images/default/grid/refresh.gif")) !important;
    }
    .x-selectable, .x-selectable *
    {
      -moz-user-select: text !important;
      -khtml-user-select: text !important;
    }
    .search-item
    {
      font: normal 11px tahoma, arial, helvetica, sans-serif;
      padding: 2px 5px 2px 5px;
      @*border: 1px solid #fff;*@
      border-bottom: 1px solid #eeeeee;
      white-space: normal;
      color: #555;
    }
    .search-item h3
    {
      display: block;
      margin: 0 0;
      font: inherit;
      font-weight: bold;
      color: #222;
    }
  </style>
  <link href="~/Scripts/ExtJS41/resources/css/ext-all.css" rel="stylesheet" type="text/css" />
  <script src="~/Scripts/ExtJS41/bootstrap.js" type="text/javascript"></script>
  <script src="@Url.Content("~/Scripts/ExtJS41/ext-lang-ru.js")" type="text/javascript"></script>
  <script type="text/javascript">
    Ext.apply(Ext.form.VTypes, {
      daterange: function (val, field) {
        var date = field.parseDate(val);
        if (!date) {
          return false;
        }
        if (field.startDateField) {
          var start = Ext.getCmp(field.startDateField);
          if (!start.maxValue || (date.getTime() != start.maxValue.getTime())) {
            start.setMaxValue(date);
            start.validate();
          }
        }
        else if (field.endDateField) {
          var end = Ext.getCmp(field.endDateField);
          if (!end.minValue || (date.getTime() != end.minValue.getTime())) {
            end.setMinValue(date);
            end.validate();
          }
        }
        /*
        * Always return true since we're only using this vtype to set the
        * min/max allowed values (these are tested for after the vtype test)
        */
        return true;
      }
    });
    Ext.onReady(function () {
      Ext.QuickTips.init();

      Ext.define('CbModel', {
        extend: 'Ext.data.Model',
        idProperty: 'id',
        fields: ['id', 'name', 'brief']
      });

      var storeFund = Ext.create('Ext.data.Store', {
        autoLoad: true,
        model: 'CbModel',
        proxy: {
          type: 'ajax',
          actionMethods: { read: 'POST' },
          url: '@Url.Action("GetFunds")',
          reader: {
            type: 'json',
            root: 'data'
          }
        }
      });
      var storeIndex = Ext.create('Ext.data.Store', {
        autoLoad: true,
        model: 'CbModel',
        proxy: {
          type: 'ajax',
          actionMethods: { read: 'POST' },
          url: '@Url.Action("GetIndexes")',
          reader: {
            type: 'json',
            root: 'data'
          }
        }
      });
      var storeStrategy = Ext.create('Ext.data.Store', {
        autoLoad: true,
        model: 'CbModel',
        proxy: {
          type: 'ajax',
          actionMethods: { read: 'POST' },
          url: '@Url.Action("GetStrategies")',
          reader: {
            type: 'json',
            root: 'data'
          }
        }
      });
      @{ var r = ModelMetadata.FromLambdaExpression(m => m, ViewData).Properties.ToList();}
      var fp = Ext.create('Ext.form.Panel', {
        activeItem: 0,
        fieldDefaults: {
          labelAlign: 'top',
          labelSeparator: '',
          msgTarget: 'side',
          emptyText: 'Не указан'
        },
        border: true,
        title: '@ViewBag.Title',
        frame: true,
        renderTo: 'f',
        autoHeight: true,
        width: 600,
        bodyStyle: 'padding:5px 10px 0',
        defaultType: 'textfield',
        //layoutConfig: { labelSeparator: '' },
        items: [{
          xtype: 'datefield',
          id: '@r[0].PropertyName',
          name: '@r[0].PropertyName',
          fieldLabel: '@r[0].GetDisplayName()',
          allowBlank: @(r[0].IsRequired ? "false" : "true"),
          format: '@(r[0].DataTypeName == "Date" ? "d.m.Y" : "")',
          vtype: 'daterange',
          endDateField: 'DateE',
          startDay: 1
        }, {
          xtype: 'datefield',
          id: '@r[1].PropertyName',
          name: '@r[1].PropertyName',
          fieldLabel: '@r[1].GetDisplayName()',
          allowBlank: false,
          format: 'd.m.Y',
          vtype: 'daterange',
          startDateField: 'DateB',
          startDay: 1
        }, {
          xtype: 'combo',
          id: 'cbClient',
          store: Ext.create('Ext.data.Store', {
            model: 'CbModel',
            proxy: {
              type: 'ajax',
              actionMethods: { read: 'POST' },
              url: '@Url.Action("GetFI")',
              reader: {
                type: 'json',
                root: 'data'
              }
            }
          }),
          valueField: 'id',
          name: '@r[2].PropertyName',
          displayField: 'brief',
          typeAhead: false,
          queryDelay: 1000,
          //pageSize: 10,
          width: 570,
          hideTrigger: true,
          forceSelection: true,
          fieldLabel: '@r[2].GetDisplayName()',
          anchor: '100%',
          minChars: 2,
          listConfig: {
            getInnerTpl: function() {
              return '<div class="search-item"><h3>{brief}</h3>{name}</div>';
            }
          },
          itemSelector: 'div.search-item',
          allowBlank: false
        }, {
          xtype: 'combo',
          id: 'cbFund',
          store: storeFund,
          displayField: 'brief',
          valueField: 'id',
          typeAhead: false,
          queryMode: 'local',
          fieldLabel: '@r[3].GetDisplayName()',
          forceSelection: true,
          triggerAction: 'all',
          selectOnFocus: true,
          width: 135,
          name: '@r[3].PropertyName',
          allowBlank: false,
          listConfig: {
            getInnerTpl: function() {
              return '<div class="search-item"><h3>{brief}</h3>{name}</div>';
            }
          }
        }, {
          xtype: 'combo',
          id: 'cbIndex',
          store: storeIndex,
          displayField: 'brief',
          valueField: 'id',
          typeAhead: false,
          queryMode: 'local',
          fieldLabel: '@r[4].GetDisplayName()',
          forceSelection: true,
          triggerAction: 'all',
          selectOnFocus: true,
          width: 570,
          name: '@r[4].PropertyName',
          allowBlank: false,
          //matchFieldWidth: false,
          listConfig: {
            getInnerTpl: function() {
              return '<div class="search-item"><h3>{brief}</h3>{name}</div>';
            },
            emptyText: 'Не указан',
            width: 570
          },
          itemSelector: 'div.search-item'
        }, {
          xtype: 'combo',
          id: 'cbStrategy',
          store: storeStrategy,
          displayField: 'brief',
          valueField: 'id',
          typeAhead: true,
          queryMode: 'local',
          fieldLabel: '@r[5].GetDisplayName()',
          //forceSelection: true,
          //triggerAction: 'all',
          selectOnFocus: true,
          width: 570,
          name: '@r[5].PropertyName',
          emptyText: '',
          allowBlank: true,
          listConfig: {
            getInnerTpl: function() {
              return '<div class="search-item"><h3>{brief}</h3>{name}</div>';
            },
            width: 570
          }
        }],
        buttonAlign: 'left',
        buttons: [{
          text: 'Выполнить',
          handler: function () {
            if (fp.form.isValid()) {
              fp.form.submit({
                url: '@Url.Action("Rep", new { id = 2 })',
                success: function (f, a) { window.location = '@Url.Action("Rep", new { id = 1 })?' + fp.getForm().getValues(true, false, false, true); },
                failure: function (f, a) { Ext.Msg.alert('Warning', 'Error'); }
              });
            }
          },
          formBind: true
        }],
        listeners: {
          actioncomplete: function (form, action) {
            if (action.type == 'load') {
              var c = this.getForm().findField('cbClient');
              var f = action.result.data.instID;
              var l = function (r) {
                c.setValue(f);
                c.store.un('load', l);
              };
              c.store.on('load', l);
              c.store.load({params: { id: f }});
            }
          }
        }
      });
      Ext.Function.defer(function () {
        fp.getForm().load({ url: '@Url.Action("GetParam", new { id = 2 })', waitMsg: 'Загрузка' });
        Ext.MessageBox.hide();
      }, 100);
    
    });
  </script>
}
<div id="f" style="padding: 30px">
</div>
